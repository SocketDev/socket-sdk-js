/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/npm/{package}/{version}/issues": {
    /**
     * Get all the issues related with a particular npm package version.
     * This endpoint returns the issue type, location, and additional details related to each issue in the `props` attribute.
     *
     * You can [see here](https://socket.dev/npm/issue) the full list of issues.
     *
     * This endpoint consumes 1 unit of your quota.
     */
    get: operations["getIssuesByNPMPackage"];
  };
  "/npm/{package}/{version}/score": {
    /**
     * Get all the scores and metrics by category that are used to evaluate the package version.
     *
     * This endpoint consumes 1 unit of your quota.
     */
    get: operations["getScoreByNPMPackage"];
  };
  "/report/delete/{id}": {
    /**
     * Delete a specific project report.
     *
     * This endpoint consumes 10 units of your quota.
     */
    delete: operations["deleteReport"];
  };
  "/report/list": {
    /**
     * Get all your project reports.
     *
     * This endpoint consumes 10 units of your quota.
     */
    get: operations["getReportList"];
  };
  "/report/upload": {
    /**
     * Upload a lockfile to get your project analyzed by Socket.
     * You can upload multiple lockfiles in the same request, but each filename must be unique.
     *
     * The name of the file must be in the supported list.
     *
     * The supported lockfiles (and filenames) are: `package.json` and `package-lock.json`.
     *
     * For example, these are valid filenames: `package.json`, `folder/package.json` and `deep/nested/folder/package.json`.
     *
     * This endpoint consumes 100 units of your quota.
     */
    put: operations["createReport"];
  };
  "/report/view/{id}": {
    /**
     * Get all the issues, packages, and scores related to an specific project report.
     *
     * This endpoint consumes 10 units of your quota.
     */
    get: operations["getReport"];
  };
  "/openapi": {
    /**
     * Retrieve the API specification in an Openapi JSON format.
     *
     * This endpoint consumes 0 units of your quota.
     */
    get: operations["getOpenAPI"];
  };
  "/quota": {
    /**
     * Get your current API quota. You can use this endpoint to prevent doing requests that might spend all your quota.
     *
     * This endpoint consumes 0 units of your quota.
     */
    get: operations["getQuota"];
  };
}

export interface components {
  schemas: {
    SocketIssueList: components["schemas"]["SocketIssue"][];
    SocketPackageScore: {
      supplyChainRisk: components["schemas"]["SocketSupplyChainScore"];
      quality: components["schemas"]["SocketQualityScore"];
      maintenance: components["schemas"]["SocketMaintenanceScore"];
      vulnerability: components["schemas"]["SocketVulnerabilityScore"];
      license: components["schemas"]["SocketLicenseScore"];
      miscellaneous: components["schemas"]["SocketMiscellaneousScore"];
      /** @default 0 */
      depscore: number;
    };
    SocketReport: {
      /** @default */
      id: string;
      /** @default false */
      healthy: boolean;
      issues: components["schemas"]["SocketIssueList"];
      score: {
        /** @default 0 */
        avgSupplyChainRisk: number;
        /** @default 0 */
        avgQuality: number;
        /** @default 0 */
        avgMaintenance: number;
        /** @default 0 */
        avgVulnerability: number;
        /** @default 0 */
        avgLicense: number;
      };
    };
    SocketIssue: Partial<{
      /** @enum {string} */
      type?: "criticalCVE";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default 0 */
          id: number;
          /** @default */
          title: string;
          /** @default critical */
          severity: string;
          /** @default */
          url: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }> &
      Partial<{
        /** @enum {string} */
        type?: "cve";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default 0 */
            id: number;
            /** @default */
            title: string;
            /** @default high */
            severity: string;
            /** @default */
            url: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "mildCVE";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default 0 */
            id: number;
            /** @default */
            title: string;
            /** @default low */
            severity: string;
            /** @default */
            url: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "installScripts";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            script: string;
            /** @default */
            source: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "hasNativeCode";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "binScriptConfusion";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            binScript: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "shellScriptOverride";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            binScript: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "filesystemAccess";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default fs */
            module: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "networkAccess";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default net */
            module: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "shellAccess";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default child_process */
            module: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "debugAccess";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default vm */
            module: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "longStrings";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "highEntropyStrings";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "urlStrings";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            urlFragment: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "usesEval";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default eval */
            evalType: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "dynamicRequire";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "envVars";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            envVars: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "missingDependency";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            name: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "unusedDependency";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            name: string;
            /** @default */
            version: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "peerDependency";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            name: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "uncaughtOptionalDependency";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            name: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "unresolvedRequire";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "extraneousDependency";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "obfuscatedRequire";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "obfuscatedFile";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default 0 */
            confidence: number;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "minifiedFile";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default 0 */
            confidence: number;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "bidi";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "zeroWidth";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "badEncoding";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default utf8 */
            encoding: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "homoglyphs";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "invisibleChars";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "suspiciousString";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            pattern: string;
            /** @default */
            explanation: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "invalidPackageJSON";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "httpDependency";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            packageName: string;
            /** @default */
            url: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "gitDependency";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            packageName: string;
            /** @default */
            url: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "gitHubDependency";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            packageName: string;
            /** @default */
            githubUser: string;
            /** @default */
            githubRepo: string;
            /** @default */
            commitsh: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "fileDependency";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            packageName: string;
            /** @default */
            filePath: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "noTests";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "noRepository";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "badSemver";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "badSemverDependency";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            packageName: string;
            /** @default */
            packageVersion: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "noV1";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "noWebsite";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "noBugTracker";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "noAuthorData";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "typeModuleCompatibility";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "emptyPackage";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "trivialPackage";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default 0 */
            linesOfCode: number;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "noREADME";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "deprecated";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default This package is deprecated */
            reason: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "chronoAnomaly";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            prevChronoDate: string;
            /** @default */
            prevChronoVersion: string;
            /** @default */
            prevSemverDate: string;
            /** @default */
            prevSemverVersion: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "semverAnomaly";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            prevVersion: string;
            /** @default */
            newVersion: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "newAuthor";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            prevAuthor: string;
            /** @default */
            newAuthor: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "unstableOwnership";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            author: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "missingAuthor";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "unmaintained";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            lastPublish: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "unpublished";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            version: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "majorRefactor";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default 0 */
            linesChanged: number;
            /** @default 0 */
            prevSize: number;
            /** @default 0 */
            curSize: number;
            /** @default 0 */
            changedPercent: number;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "missingTarball";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "unsafeCopyright";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "licenseChange";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            prevLicenseId: string;
            /** @default */
            newLicenseId: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "nonOSILicense";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            licenseId: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "deprecatedLicense";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            licenseId: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "missingLicense";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "nonSPDXLicense";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "unclearLicense";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            possibleLicenseId: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "mixedLicense";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            licenseId: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "notice";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: { [key: string]: unknown };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "modifiedLicense";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            licenseId: string;
            /** @default 0 */
            similarity: number;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "modifiedException";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            exceptionId: string;
            /** @default 0 */
            similarity: number;
            /** @default */
            comments: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "licenseException";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            exceptionId: string;
            /** @default */
            comments: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "deprecatedException";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            exceptionId: string;
            /** @default */
            comments: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "didYouMean";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            alternatePackage: string;
            /** @default 0 */
            editDistance: number;
            /** @default 0 */
            downloads: number;
            /** @default 1 */
            downloadsRatio: number;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "malware";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default 0 */
            id: number;
            /** @default */
            note: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "telemetry";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default 0 */
            id: number;
            /** @default */
            note: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "troll";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default 0 */
            id: number;
            /** @default */
            note: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }> &
      Partial<{
        /** @enum {string} */
        type?: "gptMalware";
        value?: components["schemas"]["SocketIssueBasics"] & {
          /** @default */
          description: string;
          props: {
            /** @default */
            notes: string;
          };
          usage?: components["schemas"]["SocketUsageRef"];
        };
      }>;
    SocketSupplyChainScore: {
      /** @default 0 */
      score: number;
      components: {
        dependencyCount: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        devDependencyCount: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        downloadCount: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        supplyChainRiskIssueCritical: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        supplyChainRiskIssueHigh: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        supplyChainRiskIssueLow: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        supplyChainRiskIssueMid: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        totalDependencyCount: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        transitiveDependencyCount: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
      };
      /** @default 0 */
      limit?: number;
      /**
       * @default 0
       * @enum {string}
       */
      limitingMetric?: "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8";
    };
    SocketQualityScore: {
      /** @default 0 */
      score: number;
      components: {
        linesOfCode: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        qualityIssueCritical: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        qualityIssueHigh: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        qualityIssueLow: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        qualityIssueMid: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        readmeLength: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        bundlesize?: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        forks?: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        stargazers?: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        watchers?: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
      };
      /** @default 0 */
      limit?: number;
      /**
       * @default 0
       * @enum {string}
       */
      limitingMetric?:
        | "0"
        | "1"
        | "2"
        | "3"
        | "4"
        | "5"
        | "6"
        | "7"
        | "8"
        | "9";
    };
    SocketMaintenanceScore: {
      /** @default 0 */
      score: number;
      components: {
        maintainerCount: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        maintenanceIssueCritical: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        maintenanceIssueHigh: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        maintenanceIssueLow: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        maintenanceIssueMid: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        versionCount: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        versionsLastMonth: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        versionsLastTwoMonths: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        versionsLastWeek: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        versionsLastYear: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        closedIssues?: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        commits?: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        commitsLastMonth?: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        commitsLastTwoMonths?: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        commitsLastWeek?: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        commitsLastYear?: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        openIssues?: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
      };
      /** @default 0 */
      limit?: number;
      /**
       * @default 0
       * @enum {string}
       */
      limitingMetric?:
        | "0"
        | "1"
        | "2"
        | "3"
        | "4"
        | "5"
        | "6"
        | "7"
        | "8"
        | "9"
        | "10"
        | "11"
        | "12"
        | "13"
        | "14"
        | "15"
        | "16";
    };
    SocketVulnerabilityScore: {
      /** @default 0 */
      score: number;
      components: {
        dependencyVulnerabilityCount: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        vulnerabilityCount: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        vulnerabilityIssueCritical: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        vulnerabilityIssueHigh: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        vulnerabilityIssueLow: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        vulnerabilityIssueMid: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
      };
      /** @default 0 */
      limit?: number;
      /**
       * @default 0
       * @enum {string}
       */
      limitingMetric?: "0" | "1" | "2" | "3" | "4" | "5";
    };
    SocketLicenseScore: {
      /** @default 0 */
      score: number;
      components: {
        licenseIssueCritical: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        licenseIssueHigh: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        licenseIssueLow: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        licenseIssueMid: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default 0 */
          value: number;
        };
        licenseQuality: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          value: components["schemas"]["SocketLicenseQuality"];
        };
      };
      /** @default 0 */
      limit?: number;
      /**
       * @default 0
       * @enum {string}
       */
      limitingMetric?: "0" | "1" | "2" | "3" | "4";
    };
    SocketMiscellaneousScore: {
      /** @default 0 */
      score: number;
      components: {
        typeModule: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default false */
          value: boolean;
        };
        defaultBranch?: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default main */
          value: string;
        };
        repoCreatedAt?: {
          /** @default 0 */
          score: number;
          /** @default 0 */
          maxScore: number;
          /** @default 0 */
          limit: number;
          /** @default */
          value: string;
        };
      };
      /** @default 0 */
      limit?: number;
      /**
       * @default 0
       * @enum {string}
       */
      limitingMetric?: "0" | "1" | "2";
    };
    SocketIssueBasics: {
      severity: components["schemas"]["SocketIssueSeverity"];
      category: components["schemas"]["SocketCategory"];
      locations: components["schemas"]["SocketRefList"];
    };
    SocketUsageRef: {
      file: components["schemas"]["SocketRefFile"];
      dependencies: components["schemas"]["SocketRefList"];
    };
    /**
     * @default unknown
     * @enum {string}
     */
    SocketLicenseQuality:
      | "model"
      | "gold"
      | "silver"
      | "bronze"
      | "lead"
      | "nonfree"
      | "unknown"
      | "unlicensed";
    /**
     * @default low
     * @enum {string}
     */
    SocketIssueSeverity: "low" | "middle" | "high" | "critical";
    /**
     * @default miscellaneous
     * @enum {string}
     */
    SocketCategory:
      | "supplyChainRisk"
      | "quality"
      | "maintenance"
      | "vulnerability"
      | "license"
      | "miscellaneous";
    SocketRefList: components["schemas"]["SocketRef"][];
    SocketRefFile: {
      /** @default */
      path: string;
      range?: components["schemas"]["SocketRefTextRange"];
      bytes?: components["schemas"]["SocketRefByteRange"];
    };
    SocketRef: Partial<{
      /** @enum {string} */
      type?: "unknown";
      value?: { [key: string]: unknown };
    }> &
      Partial<{
        /** @enum {string} */
        type?: "npm";
        value?: components["schemas"]["SocketRefNPM"];
      }> &
      Partial<{
        /** @enum {string} */
        type?: "git";
        value?: components["schemas"]["SocketRefGit"];
      }> &
      Partial<{
        /** @enum {string} */
        type?: "web";
        value?: components["schemas"]["SocketRefWeb"];
      }> &
      Partial<{
        /** @enum {string} */
        type?: "pypi";
        value?: components["schemas"]["SocketRefPyPI"];
      }>;
    SocketRefTextRange: {
      /** @default 0 */
      startLine: number;
      /** @default 0 */
      startColumn: number;
      /** @default 0 */
      endLine: number;
      /** @default 0 */
      endColumn: number;
    };
    SocketRefByteRange: {
      /** @default 0 */
      start: number;
      /** @default 0 */
      end: number;
    };
    SocketRefNPM: {
      /** @default */
      package: string;
      /** @default */
      version?: string;
      file?: components["schemas"]["SocketRefFile"];
    };
    SocketRefGit: {
      /** @default */
      url: string;
      /** @default */
      commit?: string;
      /** @default */
      tag?: string;
      file?: components["schemas"]["SocketRefFile"];
    };
    SocketRefWeb: {
      /** @default */
      url: string;
      file?: components["schemas"]["SocketRefFile"];
    };
    SocketRefPyPI: {
      /** @default */
      package: string;
      /** @default */
      version?: string;
      file?: components["schemas"]["SocketRefFile"];
    };
  };
  responses: {
    /** Bad request */
    SocketBadRequest: {
      content: {
        "application/json": {
          error: {
            /** @default */
            message: string;
          };
        };
      };
    };
    /** Unauthorized */
    SocketUnauthorized: {
      content: {
        "application/json": {
          error: {
            /** @default */
            message: string;
          };
        };
      };
    };
    /** Insufficient max_quota for API method */
    SocketForbidden: {
      content: {
        "application/json": {
          error: {
            /** @default */
            message: string;
          };
        };
      };
    };
    /** Resource not found */
    SocketNotFoundResponse: {
      content: {
        "application/json": {
          error: {
            /** @default */
            message: string;
          };
        };
      };
    };
    /** Insufficient quota for API route */
    SocketTooManyRequestsResponse: {
      headers: {
        /**
         * Retry contacting the endpoint *at least* after seconds.
         * See https://tools.ietf.org/html/rfc7231#section-7.1.3
         */
        "Retry-After"?: number;
      };
      content: {
        "application/json": {
          error: {
            /** @default */
            message: string;
          };
        };
      };
    };
  };
  requestBodies: {};
}

export interface operations {
  /**
   * Get all the issues related with a particular npm package version.
   * This endpoint returns the issue type, location, and additional details related to each issue in the `props` attribute.
   *
   * You can [see here](https://socket.dev/npm/issue) the full list of issues.
   *
   * This endpoint consumes 1 unit of your quota.
   */
  getIssuesByNPMPackage: {
    parameters: {
      path: {
        package: string;
        version: string;
      };
    };
    responses: {
      /** Socket issue lists */
      200: {
        content: {
          "application/json": components["schemas"]["SocketIssueList"];
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Get all the scores and metrics by category that are used to evaluate the package version.
   *
   * This endpoint consumes 1 unit of your quota.
   */
  getScoreByNPMPackage: {
    parameters: {
      path: {
        package: string;
        version: string;
      };
    };
    responses: {
      /** Socket package scores */
      200: {
        content: {
          "application/json": components["schemas"]["SocketPackageScore"];
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Delete a specific project report.
   *
   * This endpoint consumes 10 units of your quota.
   */
  deleteReport: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Success */
      200: {
        content: {
          "application/json": {
            /** @default ok */
            status: string;
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Get all your project reports.
   *
   * This endpoint consumes 10 units of your quota.
   */
  getReportList: {
    responses: {
      /** List of project reports */
      200: {
        content: {
          "application/json": {
            /** @default */
            id: string;
            /** @default */
            url: string;
          }[];
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Upload a lockfile to get your project analyzed by Socket.
   * You can upload multiple lockfiles in the same request, but each filename must be unique.
   *
   * The name of the file must be in the supported list.
   *
   * The supported lockfiles (and filenames) are: `package.json` and `package-lock.json`.
   *
   * For example, these are valid filenames: `package.json`, `folder/package.json` and `deep/nested/folder/package.json`.
   *
   * This endpoint consumes 100 units of your quota.
   */
  createReport: {
    responses: {
      /** ID and URL of the project report */
      200: {
        content: {
          "application/json": {
            /** @default */
            id: string;
            /** @default */
            url: string;
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          issueRules?: { [key: string]: boolean };
        } & { [key: string]: never };
      };
    };
  };
  /**
   * Get all the issues, packages, and scores related to an specific project report.
   *
   * This endpoint consumes 10 units of your quota.
   */
  getReport: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Socket report */
      200: {
        content: {
          "application/json": components["schemas"]["SocketReport"];
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Retrieve the API specification in an Openapi JSON format.
   *
   * This endpoint consumes 0 units of your quota.
   */
  getOpenAPI: {
    responses: {
      /** OpenAPI specification */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Get your current API quota. You can use this endpoint to prevent doing requests that might spend all your quota.
   *
   * This endpoint consumes 0 units of your quota.
   */
  getQuota: {
    responses: {
      /** Quota amount */
      200: {
        content: {
          "application/json": {
            /** @default 0 */
            quota: number;
          };
        };
      };
      401: components["responses"]["SocketUnauthorized"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
}

export interface external {}

