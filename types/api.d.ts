/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/purl": {
    /**
     * Get Packages (Beta)
     * @description Batch retrieval of package metadata and alerts by PURL strings. Compatible witch CycloneDX reports.
     *
     * Package URLs (PURLs) are an ecosystem agnostic way to identify packages.
     * CycloneDX SBOMs use the purl format to identify components.
     * This endpoint supports fetching metadata and alerts for multiple packages at once by passing an array of purl strings, or by passing an entire CycloneDX report.
     *
     * More information on purl and CycloneDX:
     *
     * - [`purl` Spec](https://github.com/package-url/purl-spec)
     * - [CycloneDX Spec](https://cyclonedx.org/specification/overview/#components)
     *
     * This endpoint returns the latest available alert data for artifacts in the batch (stale while revalidate).
     * Actively running analysis will be returned when available on subsequent runs.
     *
     * ## Examples:
     *
     * ### Looking up an npm package:
     *
     * ```json
     * {
     *   "components": [
     *     {
     *       "purl": "pkg:npm/express@4.19.2"
     *     }
     *   ]
     * }
     * ```
     *
     * ### Looking up an PyPi package:
     *
     * ```json
     * {
     *   "components": [
     *     {
     *       "purl": "pkg:pypi/django@5.0.6"
     *     }
     *   ]
     * }
     * ```
     *
     * ### Looking up a Maven package:
     *
     * ```json
     * {
     *   "components": [
     *     {
     *       "purl": "pkg:maven/log4j/log4j@1.2.17"
     *     }
     *   ]
     * }
     * ```
     *
     * ### Batch lookup
     *
     * ```json
     * {
     *   "components": [
     *     {
     *       "purl": "pkg:npm/express@4.19.2"
     *     },
     *     {
     *       "purl": "pkg:pypi/django@5.0.6"
     *     },
     *     {
     *       "purl": "pkg:maven/log4j/log4j@1.2.17"
     *     }
     *   ]
     * }
     * ```
     *
     * This endpoint consumes 100 units of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - packages:list
     */
    post: operations["batchPackageFetch"];
  };
  "/license-policy": {
    /**
     * License Policy (Beta)
     * @description Compare the license data found for a list of packages (as PURL strings) with a configurable license allow list,
     * returning information about license data which does not comply with the license allow list.
     *
     * ## Allow List Schema
     *
     * ```json
     * {
     *   allowedApprovalSources?: Array<"fsf" | "osi">,
     *   allowedFamilies?: Array<"copyleft" | "permissive">,
     *   allowedTiers?: Array<PermissiveTier | CopyleftTier>,
     *   allowedStrings?: Array<string>
     *   allowedPURLs?: Array<string>
     *   focusAlertsHere?: boolean
     * }
     * ```
     *
     * where
     *
     * PermissiveTier ::= "model permissive" | "gold" | "silver" | "bronze" | "lead"
     * CopyleftTier ::= "maximal copyleft" | "network copyleft" | "strong copyleft" | "weak copyleft"
     *
     * readers can learn more about [copyleft tiers](https://blueoakcouncil.org/copyleft) and [permissive tiers](https://blueoakcouncil.org/list) by reading the linked resources.
     *
     * ## Return value
     *
     * For each requested PURL, an array is returned. Each array contains a list of license policy violations
     * detected for the requested PURL.
     *
     * Violations are accompanied by a string identifying the offending license data as `spdxAtomOrExtraData`,
     * a message describing why the license data is believed to be incompatible with the license policy, and a list
     * of locations (by filepath or other provenance information) where the offending license data may be found.
     *
     * ```json
     * Array<
     *   Array<{
     *     purl: string,
     *     spdxAtomOrExtraData: string,
     *     violationExplanation: string,
     *     filepathOrProvenance: Array<string>
     *   }>
     * >
     * ```
     *
     * ### Example request bodies:
     * ```json
     * {
     *   "components": [
     *     {
     *       "purl": "pkg:pypi/alt-aiohttp-cors@0.7.1?artifact_id=tar-gz"
     *     },
     *     {
     *       "purl": "pkg:npm/express@4.19.2"
     *     }
     *   ],
     *   "license_allow_list": {
     *     "allowedApprovalSources: ["fsf", "osi"],
     *     "allowedFamilies": ["permissive"],
     *     "allowedStrings": ["License :: OSI Approved :: BSD License", "UniqueLicense-2.0"]
     *   }
     * }
     * ```
     *
     * This endpoint consumes 100 units of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - packages:list
     */
    post: operations["licensePolicy"];
  };
  "/saturate-license-policy": {
    /**
     * Saturate License Policy (Beta)
     * @description Get the "saturated" version of a license policy's allow list, filling in the entire set of allowed
     * license data. For example, the saturated form of a license allow list which only specifies that
     * licenses in the tier "maximal copyleft" are allowed is shown below (note the expanded `allowedStrings` property):
     *
     * ```json
     * {
     *   "allowedApprovalSources": [],
     *   "allowedFamilies": [],
     *   "allowedTiers": [
     *     "maximal copyleft"
     *   ],
     *   "allowedStrings": [
     *     "Parity-6.0.0",
     *     "QPL-1.0-INRIA-2004",
     *     "QPL-1.0",
     *     "RPL-1.1",
     *     "RPL-1.5"
     *   ],
     *   "allowedPURLs": [],
     *   "focusAlertsHere": false
     * }
     * ```
     *
     * This may be helpful for users who want to compose more complex sets of allowed license data via
     * the "allowedStrings" property, or for users who want to know more about the contents of a particular
     * license group (family, tier, or approval source).
     *
     * ## Allow List Schema
     *
     * ```json
     * ```
     *
     * where
     *
     * PermissiveTier ::= "model permissive" | "gold" | "silver" | "bronze" | "lead"
     * CopyleftTier ::= "maximal copyleft" | "network copyleft" | "strong copyleft" | "weak copyleft"
     *
     * ## Return Value
     *
     * The returned value has the same shape as a license allow list:
     *
     * ```json
     * {
     *   allowedApprovalSources?: Array<"fsf" | "osi">,
     *   allowedFamilies?: Array<"copyleft" | "permissive">,
     *   allowedTiers?: Array<PermissiveTier | CopyleftTier>,
     *   allowedStrings?: Array<string>
     *   allowedPURLs?: Array<string>
     *   focusAlertsHere?: boolean
     * }
     * ```
     *
     * where
     *
     * PermissiveTier ::= "model permissive" | "gold" | "silver" | "bronze" | "lead"
     * CopyleftTier ::= "maximal copyleft" | "network copyleft" | "strong copyleft" | "weak copyleft"
     *
     * readers can learn more about [copyleft tiers](https://blueoakcouncil.org/copyleft) and [permissive tiers](https://blueoakcouncil.org/list) by reading the linked resources.
     *
     * ### Example request bodies:
     * ```json
     * {
     *   "allowedApprovalSources": ["fsf"],
     *   "allowedPURLs": [],
     *   "allowedFamilies": ["copyleft"],
     *   "allowedTiers": ["model permissive"],
     *   "allowedStrings": ["License :: OSI Approved :: BSD License"],
     *   "focusAlertsHere": false
     * }
     * ```
     *
     * This endpoint consumes 100 units of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - packages:list
     */
    post: operations["saturateLicensePolicy"];
  };
  "/orgs/{org_slug}/audit-log": {
    /**
     * Get Audit Log Events
     * @description Paginated list of audit log events.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - audit-log:list
     */
    get: operations["getAuditLogEvents"];
  };
  "/orgs/{org_slug}/export/cdx/{id}": {
    /**
     * Export CycloneDX SBOM (Beta)
     * @description Export a Socket SBOM as a CycloneDX SBOM
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - report:read
     */
    get: operations["exportCDX"];
  };
  "/orgs/{org_slug}/export/spdx/{id}": {
    /**
     * Export SPDX SBOM (Beta)
     * @description Export a Socket SBOM as a SPDX SBOM
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - report:read
     */
    get: operations["exportSPDX"];
  };
  "/orgs/{org_slug}/full-scans": {
    /**
     * List full scans
     * @description Returns a paginated list of all full scans in an org, excluding SBOM artifacts.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - full-scans:list
     */
    get: operations["getOrgFullScanList"];
    /**
     * Create full scan
     * @description Create a full scan from a set of package manifest files. Returns a full scan including all SBOM artifacts.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - full-scans:create
     */
    post: operations["CreateOrgFullScan"];
  };
  "/orgs/{org_slug}/full-scans/{full_scan_id}": {
    /**
     * Stream full scan
     * @description Stream all SBOM artifacts for a full scan.
     *
     * This endpoint returns the latest, available alert data for artifacts in the full scan (stale while revalidate).
     * Actively running analysis will be returned when available on subsequent runs.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - full-scans:list
     */
    get: operations["getOrgFullScan"];
    /**
     * Delete full scan
     * @description Delete an existing full scan.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - full-scans:delete
     */
    delete: operations["deleteOrgFullScan"];
  };
  "/orgs/{org_slug}/full-scans/{full_scan_id}/metadata": {
    /**
     * Get full scan metadata
     * @description Get metadata for a single full scan
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - full-scans:list
     */
    get: operations["getOrgFullScanMetadata"];
  };
  "/orgs/{org_slug}/full-scans/diff": {
    /**
     * Diff Full Scans
     * @description Get the difference between two Full Scans.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - full-scans:list
     */
    get: operations["GetOrgDiffScan"];
  };
  "/orgs/{org_slug}/repos": {
    /**
     * List repositories
     * @description Lists repositories for the specified organization.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - repo:list
     */
    get: operations["getOrgRepoList"];
    /**
     * Create repository
     * @description Create a repository.
     *
     * Repos collect Full scans and Diff scans and are typically associated with a git repo.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - repo:create
     */
    post: operations["createOrgRepo"];
  };
  "/orgs/{org_slug}/repos/{repo_slug}": {
    /**
     * Get repository
     * @description Retrieve a repository associated with an organization.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - repo:list
     */
    get: operations["getOrgRepo"];
    /**
     * Update repository
     * @description Update details of an existing repository.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - repo:update
     */
    post: operations["updateOrgRepo"];
    /**
     * Delete repository
     * @description Delete a single repository and all of its associated Full scans and Diff scans.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - repo:delete
     */
    delete: operations["deleteOrgRepo"];
  };
  "/orgs/{org_slug}/triage/alerts": {
    /**
     * List Org Alert Triage
     * @description Get alert triage actions for an organization.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - triage:alerts-list
     */
    get: operations["getOrgTriage"];
    /**
     * Update Org Alert Triage
     * @description Update triage actions on organizaton alerts.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - triage:alerts-update
     */
    post: operations["updateOrgAlertTriage"];
  };
  "/orgs/{org_slug}/settings/integrations/{integration_id}/events": {
    /**
     * Get integration events
     * @description Retrieve events for integration.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - integration:list
     */
    get: operations["getIntegrationEvents"];
  };
  "/orgs/{org_slug}/settings/security-policy": {
    /**
     * Get Organization Security Policy
     * @description Retrieve the security policy of an organization.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - security-policy:read
     */
    get: operations["getOrgSecurityPolicy"];
    /**
     * Update Security Policy
     * @description Update the security policy of an organization.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - security-policy:update
     */
    post: operations["updateOrgSecurityPolicy"];
  };
  "/orgs/{org_slug}/settings/license-policy": {
    /**
     * Get Organization License Policy
     * @description Retrieve the license policy of an organization.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - license-policy:read
     */
    get: operations["getOrgLicensePolicy"];
    /**
     * Update License Policy
     * @description Update the license policy of an organization.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - license-policy:update
     */
    post: operations["updateOrgLicensePolicy"];
  };
  "/analytics/org/{filter}": {
    /**
     * Get organization analytics (unstable)
     * @description Get analytics data regarding the number of alerts found across all active repositories.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - report:write
     */
    get: operations["getOrgAnalytics"];
  };
  "/analytics/repo/{name}/{filter}": {
    /**
     * Get repository analytics
     * @description Get analytics data regarding the number of alerts found in a single repository.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - report:write
     */
    get: operations["getRepoAnalytics"];
  };
  "/dependencies/search": {
    /**
     * Search dependencies
     * @description Search for any dependency that is being used in your organization.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - Any
     */
    post: operations["searchDependencies"];
  };
  "/dependencies/upload": {
    /**
     * Create a snapshot of all dependencies from manifest information
     * @deprecated
     * @description Upload a set of manifest or lockfiles to get your dependency tree analyzed by Socket.
     * You can upload multiple lockfiles in the same request, but each filename must be unique.
     *
     * The name of the file must be in the supported list.
     *
     * For example, these are valid filenames: "requirements.txt", "package.json", "folder/package.json", and "deep/nested/folder/package.json".
     *
     * This endpoint consumes 100 units of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - report:write
     */
    post: operations["createDependenciesSnapshot"];
  };
  "/report/supported": {
    /**
     * Get supported files for report
     * @description Get a list of supported files for project report generation.
     * Files are categorized first by environment (e.g. NPM or PyPI), then by name.
     *
     * Files whose names match the patterns returned by this endpoint can be uploaded for report generation.
     * Examples of supported filenames include `package.json`, `package-lock.json`, and `yarn.lock`.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     */
    get: operations["getReportSupportedFiles"];
  };
  "/report/delete/{id}": {
    /**
     * Delete a report
     * @deprecated
     * @description Deprecated: Use `/orgs/{org_slug}/full-scans` instead. Delete a specific project report generated with the GitHub app.
     *
     * This endpoint consumes 10 units of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - report:write
     */
    delete: operations["deleteReport"];
  };
  "/report/list": {
    /**
     * Get list of reports
     * @deprecated
     * @description Deprecated: Use `/orgs/{org_slug}/full-scans` instead. Get all your project reports generated with the GitHub app.
     *
     * This endpoint consumes 10 units of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - report:list
     */
    get: operations["getReportList"];
  };
  "/report/upload": {
    /**
     * Create a report
     * @deprecated
     * @description Deprecated: Use `/orgs/{org_slug}/full-scans` instead.
     *
     * Upload a lockfile to get your project analyzed by Socket.
     * You can upload multiple lockfiles in the same request, but each filename must be unique.
     *
     * The name of the file must be in the supported list.
     *
     * For example, these are valid filenames: `package.json`, `folder/package.json` and `deep/nested/folder/package.json`.
     *
     * This endpoint consumes 100 units of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - report:write
     */
    put: operations["createReport"];
  };
  "/report/view/{id}": {
    /**
     * View a report
     * @deprecated
     * @description Deprecated: Use `/orgs/{org_slug}/full-scans` instead. Get all the issues, packages, and scores related to an specific project report.
     *
     * This endpoint consumes 10 units of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - report:read
     */
    get: operations["getReport"];
  };
  "/repo/list": {
    /**
     * List GitHub repositories
     * @deprecated
     * @description Deprecated: Use `/orgs/{org_slug}/repos` instead. Get all GitHub repositories associated with a Socket org.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - repo:list
     */
    get: operations["getRepoList"];
  };
  "/threat-feed": {
    /**
     * Get Threat Feed Items (Beta)
     * @description Paginated list of threat feed items.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - threat-feed:list
     */
    get: operations["getThreatFeedItems"];
  };
  "/openapi": {
    /**
     * Returns the OpenAPI definition
     * @description Retrieve the API specification in an Openapi JSON format.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     */
    get: operations["getOpenAPI"];
  };
  "/quota": {
    /**
     * Get quota
     * @description Get your current API quota. You can use this endpoint to prevent doing requests that might spend all your quota.
     *
     * This endpoint consumes 0 units of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - Any
     */
    get: operations["getQuota"];
  };
  "/organizations": {
    /**
     * List organizations
     * @description Get information on the current organizations associated with the API key.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - Any
     */
    get: operations["getOrganizations"];
  };
  "/settings": {
    /**
     * Calculate settings
     * @description Get current settings for the requested organizations and default settings to allow deferrals.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - Any
     */
    post: operations["postSettings"];
  };
  "/npm/{package}/{version}/issues": {
    /**
     * Get issues by package
     * @deprecated
     * @description Get all the issues related with a particular npm package version.
     * This endpoint returns the issue type, location, and additional details related to each issue in the `props` attribute.
     *
     * You can [see here](https://socket.dev/npm/issue) the full list of issues.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - Any
     */
    get: operations["getIssuesByNPMPackage"];
  };
  "/npm/{package}/{version}/score": {
    /**
     * Get score by package
     * @deprecated
     * @description Get all the scores and metrics by category that are used to evaluate the package version.
     *
     * This endpoint is deprecated. Use the batched "Get Packages" endpoint instead.
     *
     * - depscore: The average of all score factors. (0-1)
     * - supplyChainRisk: Score factors relating to supply chain security (0-1)
     * - downloadCount: The number of downloads for the package. Higher downloads contribute to a higher score.
     * - supplyChainRiskIssueLow/Mid/High/Critical: The number of supply chain risk issues of varying severity. Lower numbers contribute to a higher score.
     * - dependencyCount: The number of production dependencies. Lower count contributes to a higher score.
     * - devDependencyCount: The number of development dependencies. Lower count contributes to a higher score.
     * - transitiveDependencyCount: The number of transitive dependencies. Lower count contributes to a higher score.
     * - totalDependencyCount: The total number of dependencies (production + development + transitive). Lower count contributes to a higher score.
     * - quality: Score factors relating to code quality (0-1)
     * - qualityIssueLow/Mid/High/Critical: The number of code quality issues of varying severity. Lower numbers contribute to a higher score.
     * - linesOfCode: The number of lines of code in the package. Lower count contributes to a higher score.
     * - readmeLength: The length of the package's README file. Longer READMEs contribute to a higher score.
     * - maintenance: Score factors relating to package maintenance (0-1)
     * - maintainerCount: The number of maintainers for the package. More maintainers contribute to a higher score.
     * - versionsLastWeek/Month/TwoMonths/Year: The number of versions released in different time periods. More recent releases contribute to a higher score.
     * - versionCount: The total number of versions released. Higher count contributes to a higher score.
     * - maintenanceIssueLow/Mid/High/Critical: The number of maintenance issues of varying severity. Lower numbers contribute to a higher score.
     * - vulnerability: Score factors relating to package vulnerabilities (0-1)
     * - vulnerabilityIssueLow/Mid/High/Critical: The number of vulnerability issues of varying severity. Lower numbers contribute to a higher score.
     * - dependencyVulnerabilityCount: The number of vulnerabilities in the package's dependencies. Lower count contributes to a higher score.
     * - vulnerabilityCount: The number of vulnerabilities in the package itself. Lower count contributes to a higher score.
     * - license: Score factors relating to package licensing (0-1)
     * - licenseIssueLow/Mid/High/Critical: The number of license issues of varying severity. Lower numbers contribute to a higher score.
     * - licenseQuality: A score indicating the quality/permissiveness of the package's license. Higher quality contributes to a higher score.
     * - miscellaneous: Miscellaneous metadata about the package version.
     * - versionAuthorName/Email: The name and email of the version author.
     * - fileCount: The number of files in the package.
     * - byteCount: The total size in bytes of the package.
     * - typeModule: Whether the package declares a "type": "module" field.
     *
     * This endpoint consumes 1 unit of your quota.
     *
     * This endpoint requires the following org token scopes:
     * - Any
     */
    get: operations["getScoreByNPMPackage"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    SocketArtifact: components["schemas"]["SocketPURL"] & components["schemas"]["SocketArtifactLink"] & {
      id: components["schemas"]["SocketId"];
      /** @default */
      license?: string;
      licenseDetails?: components["schemas"]["LicenseDetails"];
      licenseAttrib?: components["schemas"]["SAttrib1_N"];
      author?: string[];
      /** @default 0 */
      size?: number;
      score?: components["schemas"]["SocketScore"];
      alerts?: components["schemas"]["SocketAlert"][];
      /** @default 0 */
      batchIndex?: number;
    };
    SocketBatchPURLFetch: {
      components: components["schemas"]["SocketBatchPURLRequest"][];
    };
    LicenseAllowListRequest: {
      components: components["schemas"]["SocketBatchPURLRequest"][];
      license_allow_list: components["schemas"]["LicenseAllowList"];
    };
    LicenseAllowList: {
      allowedApprovalSources: string[];
      allowedFamilies: string[];
      allowedTiers: string[];
      allowedStrings: string[];
      allowedPURLs: string[];
      /** @default false */
      focusAlertsHere: boolean;
    };
    CDXManifestSchema: {
      /** @default CycloneDX */
      bomFormat: string;
      /** @default 1.5 */
      specVersion: string;
      /** @default */
      serialNumber: string;
      /** @default 0 */
      version: number;
      metadata: {
        /** @default */
        timestamp: string;
        tools: {
          components: (components["schemas"]["CDXComponentSchema"] & {
              /** @default Socket */
              author?: string;
              authors?: string[];
              /** @default Socket */
              publisher?: string;
            })[];
        };
        authors: {
            /** @default Socket */
            name: string;
          }[];
        /** @default */
        supplier?: string;
        lifecycles: {
            /** @default build */
            phase: string;
          }[];
        component: components["schemas"]["CDXComponentSchema"];
        properties?: {
            /** @default */
            name: string;
            /** @default */
            value: string;
          }[];
      };
      components: components["schemas"]["CDXComponentSchema"][];
      dependencies: {
          /** @default */
          ref: string;
          dependsOn?: string[];
        }[];
    };
    SPDXManifestSchema: {
      /** @default SPDX-2.3 */
      spdxVersion: string;
      /** @default CC0-1.0 */
      dataLicense: string;
      /** @default SPDXRef-DOCUMENT */
      SPDXID: string;
      /** @default */
      name: string;
      /** @default */
      documentNamespace: string;
      creationInfo: {
        /** @default */
        created: string;
        creators: string[];
      };
      documentDescribes: string[];
      packages: {
          /** @default */
          name: string;
          /** @default */
          SPDXID: string;
          /** @default */
          versionInfo: string;
          /** @default */
          packageFileName: string;
          /** @default */
          description?: string;
          /** @default */
          primaryPackagePurpose?: string;
          /** @default */
          downloadLocation?: string;
          /** @default false */
          filesAnalyzed: boolean;
          /** @default NOASSERTION */
          homepage: string;
          /** @default NOASSERTION */
          licenseDeclared: string;
          externalRefs: {
              /** @default PACKAGE-MANAGER */
              referenceCategory: string;
              /** @default purl */
              referenceType: string;
              /** @default */
              referenceLocator: string;
            }[];
          checksums?: {
              /** @default */
              algorithm: string;
              /** @default */
              checksumValue: string;
            }[];
        }[];
      relationships: {
          /** @default SPDXRef-DOCUMENT */
          spdxElementId: string;
          /** @default */
          relatedSpdxElement: string;
          /** @default DESCRIBES */
          relationshipType: string;
        }[];
    };
    SocketReport: {
      /** @default */
      id: string;
      /** @default false */
      healthy: boolean;
      issues: components["schemas"]["SocketIssueList"];
      score: {
        /** @default 0 */
        avgSupplyChainRisk: number;
        /** @default 0 */
        avgQuality: number;
        /** @default 0 */
        avgMaintenance: number;
        /** @default 0 */
        avgVulnerability: number;
        /** @default 0 */
        avgLicense: number;
      };
      /** @default */
      url: string;
    };
    SocketIssueList: components["schemas"]["SocketIssue"][];
    SocketPackageScore: {
      supplyChainRisk: components["schemas"]["SocketMetricSchema"];
      quality: components["schemas"]["SocketMetricSchema"];
      maintenance: components["schemas"]["SocketMetricSchema"];
      vulnerability: components["schemas"]["SocketMetricSchema"];
      license: components["schemas"]["SocketMetricSchema"];
      miscellaneous: components["schemas"]["SocketMetricSchema"];
      /** @default 0 */
      depscore: number;
    };
    SocketPURL: {
      type: components["schemas"]["SocketPURL_Type"];
      /** @default */
      namespace?: string;
      /** @default */
      name?: string;
      /** @default */
      version?: string;
      /** @default */
      subpath?: string;
      /** @default */
      release?: string;
    };
    /** @default */
    SocketId: string;
    SocketArtifactLink: {
      /** @default false */
      direct?: boolean;
      manifestFiles?: components["schemas"]["SocketManifestReference"][];
      topLevelAncestors?: components["schemas"]["SocketId"][];
      dependencies?: components["schemas"]["SocketId"][];
      artifact?: components["schemas"]["SocketPURL"] & {
        id: components["schemas"]["SocketId"];
      };
    };
    LicenseDetails: {
        /** @default */
        spdxDisj: string;
        /** @default */
        provenance: string;
        /** @default */
        filepath: string;
        /** @default 0 */
        match_strength: number;
      }[];
    SAttrib1_N: {
        /** @default */
        attribText: string;
        attribData: {
            /** @default */
            purl: string;
            /** @default */
            foundInFilepath: string;
            /** @default */
            spdxExpr: string;
            foundAuthors: string[];
          }[];
      }[];
    SocketScore: {
      /** @default 0 */
      supplyChain: number;
      /** @default 0 */
      quality: number;
      /** @default 0 */
      maintenance: number;
      /** @default 0 */
      vulnerability: number;
      /** @default 0 */
      license: number;
      /** @default 0 */
      overall: number;
    };
    SocketAlert: {
      /** @default */
      key: string;
      /** @default */
      type: string;
      severity: components["schemas"]["SocketIssueSeverity"];
      category: components["schemas"]["SocketCategory"];
      /** @default */
      file?: string;
      /** @default 0 */
      start?: number;
      /** @default 0 */
      end?: number;
      /** @default null */
      props?: Record<string, never>;
      /** @default */
      action?: string;
      /** @default 0 */
      actionPolicyIndex?: number;
    };
    SocketBatchPURLRequest: {
      /** @default */
      purl: string;
    };
    CDXComponentSchema: {
      /** @default */
      author?: string;
      /** @default */
      publisher?: string;
      /** @default */
      group: string;
      /** @default */
      name: string;
      /** @default */
      version: string;
      /** @default */
      description?: string;
      /** @default */
      scope?: string;
      hashes?: {
          /** @default */
          alg: string;
          /** @default */
          content: string;
        }[];
      licenses?: {
          /** @default */
          expression?: string;
          license?: {
            /** @default */
            id?: string;
            /** @default */
            name?: string;
            /** @default */
            url?: string;
          };
        }[];
      /** @default */
      purl: string;
      externalReferences?: {
          /** @default */
          type: string;
          /** @default */
          url: string;
        }[];
      /** @default application */
      type: string;
      /** @default */
      "bom-ref": string;
      evidence?: {
        identity: {
          /** @default */
          field: string;
          /** @default 0 */
          confidence: number;
          methods: {
              /** @default */
              technique: string;
              /** @default 0 */
              confidence: number;
              /** @default */
              value: string;
            }[];
        };
        occurrences?: {
            /** @default */
            location: string;
          }[];
      };
      tags?: string[];
      properties?: {
          /** @default */
          name: string;
          /** @default */
          value: string;
        }[];
      cryptoProperties?: {
          /** @default */
          assetType: string;
          algorithmProperties: {
            /** @default */
            executionEnvironment: string;
            /** @default */
            implementationPlatform: string;
          };
        }[];
      components?: components["schemas"]["CDXComponentSchema"][];
    };
    SocketIssue: ({
      /** @enum {string} */
      type?: "gptSecurity";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          notes: string;
          /** @default 0 */
          confidence: number;
          /** @default 0 */
          severity: number;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "gptAnomaly";
      value?: components["schemas"]["SocketIssueBasics"] & ({
        /** @default */
        description: string;
        props: {
          /** @default */
          notes: string;
          /** @default 0 */
          confidence: number;
          /** @default 0 */
          severity: number;
          /**
           * @default medium
           * @enum {string}
           */
          risk: "low" | "medium" | "high";
        };
        usage?: components["schemas"]["SocketUsageRef"];
      });
    }) | ({
      /** @enum {string} */
      type?: "gptMalware";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          notes: string;
          /** @default 0 */
          confidence: number;
          /** @default 0 */
          severity: number;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "filesystemAccess";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default fs */
          module: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "networkAccess";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default net */
          module: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "shellAccess";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default child_process */
          module: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "debugAccess";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default vm */
          module: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "criticalCVE";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          cveId: string;
          cwes: {
              /** @default */
              description: string;
              /** @default */
              id: string;
              /** @default */
              name: string;
            }[];
          cvss: {
            /** @default 0 */
            score: number;
            /** @default */
            vectorString: string;
          };
          /** @default */
          description: string;
          /** @default */
          firstPatchedVersionIdentifier: string;
          /** @default */
          ghsaId: string;
          /** @default critical */
          severity: string;
          /** @default */
          title: string;
          /** @default */
          url: string;
          /** @default */
          vulnerableVersionRange: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "cve";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          cveId: string;
          cwes: {
              /** @default */
              description: string;
              /** @default */
              id: string;
              /** @default */
              name: string;
            }[];
          cvss: {
            /** @default 0 */
            score: number;
            /** @default */
            vectorString: string;
          };
          /** @default */
          description: string;
          /** @default */
          firstPatchedVersionIdentifier: string;
          /** @default */
          ghsaId: string;
          /** @default critical */
          severity: string;
          /** @default */
          title: string;
          /** @default */
          url: string;
          /** @default */
          vulnerableVersionRange: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "mediumCVE";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          cveId: string;
          cwes: {
              /** @default */
              description: string;
              /** @default */
              id: string;
              /** @default */
              name: string;
            }[];
          cvss: {
            /** @default 0 */
            score: number;
            /** @default */
            vectorString: string;
          };
          /** @default */
          description: string;
          /** @default */
          firstPatchedVersionIdentifier: string;
          /** @default */
          ghsaId: string;
          /** @default critical */
          severity: string;
          /** @default */
          title: string;
          /** @default */
          url: string;
          /** @default */
          vulnerableVersionRange: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "mildCVE";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          cveId: string;
          cwes: {
              /** @default */
              description: string;
              /** @default */
              id: string;
              /** @default */
              name: string;
            }[];
          cvss: {
            /** @default 0 */
            score: number;
            /** @default */
            vectorString: string;
          };
          /** @default */
          description: string;
          /** @default */
          firstPatchedVersionIdentifier: string;
          /** @default */
          ghsaId: string;
          /** @default critical */
          severity: string;
          /** @default */
          title: string;
          /** @default */
          url: string;
          /** @default */
          vulnerableVersionRange: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "emptyPackage";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "trivialPackage";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default 0 */
          linesOfCode: number;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "noREADME";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "shrinkwrap";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "licenseSpdxDisj";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          spdxDisj: string;
          /** @default */
          licenseScanResult: string;
          violationData: Record<string, never>[];
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "unsafeCopyright";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "licenseChange";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          prevLicenseId: string;
          /** @default */
          newLicenseId: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "nonOSILicense";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          licenseId: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "deprecatedLicense";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          licenseId: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "missingLicense";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "nonSPDXLicense";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "unclearLicense";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          possibleLicenseId: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "mixedLicense";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          licenseId: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "notice";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "modifiedLicense";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          licenseId: string;
          /** @default 0 */
          similarity: number;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "modifiedException";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          exceptionId: string;
          /** @default 0 */
          similarity: number;
          /** @default */
          comments: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "licenseException";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          exceptionId: string;
          /** @default */
          comments: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "deprecatedException";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          exceptionId: string;
          /** @default */
          comments: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "miscLicenseIssues";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          description: string;
          /** @default */
          location: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "unidentifiedLicense";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          location: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "noLicenseFound";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "explicitlyUnlicensedItem";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          location: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "copyleftLicense";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          licenseId: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "nonpermissiveLicense";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          licenseId: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "ambiguousClassifier";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          classifier: string;
          /** @default */
          filepathOrProvenance: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "invalidPackageJSON";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "httpDependency";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          packageName: string;
          /** @default */
          url: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "gitDependency";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          packageName: string;
          /** @default */
          url: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "gitHubDependency";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          packageName: string;
          /** @default */
          githubUser: string;
          /** @default */
          githubRepo: string;
          /** @default */
          commitsh: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "fileDependency";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          packageName: string;
          /** @default */
          filePath: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "noTests";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "noRepository";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "badSemver";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "badSemverDependency";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          packageName: string;
          /** @default */
          packageVersion: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "noV1";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "noWebsite";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "noBugTracker";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "noAuthorData";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "typeModuleCompatibility";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "floatingDependency";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          dependency: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "manifestConfusion";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          key: string;
          /** @default */
          description: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "malware";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default 0 */
          id: number;
          /** @default */
          note: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "telemetry";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default 0 */
          id: number;
          /** @default */
          note: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "troll";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default 0 */
          id: number;
          /** @default */
          note: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "deprecated";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default This package is deprecated */
          reason: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "chronoAnomaly";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          prevChronoDate: string;
          /** @default */
          prevChronoVersion: string;
          /** @default */
          prevSemverDate: string;
          /** @default */
          prevSemverVersion: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "compromisedSSHKey";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          fingerprint: string;
          /** @default */
          sshKey: string;
          /** @default */
          username: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "semverAnomaly";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          prevVersion: string;
          /** @default */
          newVersion: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "newAuthor";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          prevAuthor: string;
          /** @default */
          newAuthor: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "unstableOwnership";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          author: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "missingAuthor";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "unmaintained";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          lastPublish: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "unpublished";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          version: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "majorRefactor";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default 0 */
          linesChanged: number;
          /** @default 0 */
          prevSize: number;
          /** @default 0 */
          curSize: number;
          /** @default 0 */
          changedPercent: number;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "missingTarball";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "suspiciousStarActivity";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default 0 */
          percentageSuspiciousStars: number;
          /** @default */
          repository: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "unpopularPackage";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "socketUpgradeAvailable";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          categories: string[];
          /** @default false */
          deprecated: boolean;
          interop: string[];
          /** @default */
          replacementPURL: string;
          /** @default */
          version: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "longStrings";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "highEntropyStrings";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "urlStrings";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          urlFragment: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "usesEval";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default eval */
          evalType: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "dynamicRequire";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "envVars";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          envVars: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "missingDependency";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          name: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "unusedDependency";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          name: string;
          /** @default */
          version: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "peerDependency";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          name: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "uncaughtOptionalDependency";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          name: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "unresolvedRequire";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "extraneousDependency";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "obfuscatedRequire";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "obfuscatedFile";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default 0 */
          confidence: number;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "minifiedFile";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default 0 */
          confidence: number;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "installScripts";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          script: string;
          /** @default */
          source: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "hasNativeCode";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          source: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "binScriptConfusion";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          binScript: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "shellScriptOverride";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          binScript: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "didYouMean";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          alternatePackage: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "gptDidYouMean";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          alternatePackage: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "bidi";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "zeroWidth";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "badEncoding";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default utf8 */
          encoding: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "homoglyphs";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "invisibleChars";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "suspiciousString";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          pattern: string;
          /** @default */
          explanation: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "potentialVulnerability";
      value?: components["schemas"]["SocketIssueBasics"] & ({
        /** @default */
        description: string;
        props: {
          /** @default */
          note: string;
          /**
           * @default medium
           * @enum {string}
           */
          risk: "low" | "medium" | "high";
        };
        usage?: components["schemas"]["SocketUsageRef"];
      });
    });
    SocketMetricSchema: {
      /** @default 0 */
      score: number;
      components: {
        [key: string]: components["schemas"]["SocketMetricComponent"];
      };
      /** @default 0 */
      limit?: number;
      /** @default */
      limitingMetric?: string;
    };
    /**
     * @default unknown
     * @enum {string}
     */
    SocketPURL_Type: "unknown" | "npm" | "pypi" | "golang";
    SocketManifestReference: {
      /** @default */
      file: string;
      /** @default 0 */
      start?: number;
      /** @default 0 */
      end?: number;
    };
    /**
     * @default low
     * @enum {string}
     */
    SocketIssueSeverity: "low" | "middle" | "high" | "critical";
    /**
     * @default miscellaneous
     * @enum {string}
     */
    SocketCategory: "supplyChainRisk" | "quality" | "maintenance" | "vulnerability" | "license" | "miscellaneous";
    SocketIssueBasics: {
      severity: components["schemas"]["SocketIssueSeverity"];
      category: components["schemas"]["SocketCategory"];
      locations: components["schemas"]["SocketRefList"];
      /** @default */
      label: string;
    };
    SocketUsageRef: {
      file: components["schemas"]["SocketRefFile"];
      dependencies: components["schemas"]["SocketRefList"];
    };
    SocketMetricComponent: {
      /** @default 0 */
      score: number;
      /** @default 0 */
      maxScore: number;
      /** @default 0 */
      limit: number;
      /** @default null */
      value: Record<string, never>;
    };
    SocketRefList: components["schemas"]["SocketRef"][];
    SocketRefFile: {
      /** @default */
      path: string;
      range?: components["schemas"]["SocketRefTextRange"];
      bytes?: components["schemas"]["SocketRefByteRange"];
    };
    SocketRef: {
      /** @enum {string} */
      type?: "unknown";
      value?: Record<string, never>;
    } | {
      /** @enum {string} */
      type?: "npm";
      value?: components["schemas"]["SocketRefNPM"];
    } | {
      /** @enum {string} */
      type?: "git";
      value?: components["schemas"]["SocketRefGit"];
    } | {
      /** @enum {string} */
      type?: "web";
      value?: components["schemas"]["SocketRefWeb"];
    } | {
      /** @enum {string} */
      type?: "pypi";
      value?: components["schemas"]["SocketRefPyPI"];
    } | {
      /** @enum {string} */
      type?: "go";
      value?: components["schemas"]["SocketRefGo"];
    };
    SocketRefTextRange: {
      /** @default 0 */
      startLine: number;
      /** @default 0 */
      startColumn: number;
      /** @default 0 */
      endLine: number;
      /** @default 0 */
      endColumn: number;
    };
    SocketRefByteRange: {
      /** @default 0 */
      start: number;
      /** @default 0 */
      end: number;
    };
    SocketRefNPM: {
      /** @default */
      package: string;
      /** @default */
      version?: string;
      file?: components["schemas"]["SocketRefFile"];
    };
    SocketRefGit: {
      /** @default */
      url: string;
      /** @default */
      commit?: string;
      /** @default */
      tag?: string;
      file?: components["schemas"]["SocketRefFile"];
    };
    SocketRefWeb: {
      /** @default */
      url: string;
      file?: components["schemas"]["SocketRefFile"];
    };
    SocketRefPyPI: {
      /** @default */
      package: string;
      /** @default */
      version?: string;
      /** @default */
      artifact?: string;
      file?: components["schemas"]["SocketRefFile"];
    };
    SocketRefGo: {
      /** @default */
      package: string;
      /** @default */
      version?: string;
      file?: components["schemas"]["SocketRefFile"];
    };
  };
  responses: {
    /** @description Bad request */
    SocketBadRequest: {
      content: {
        "application/json": {
          error: {
            /** @default */
            message: string;
          };
        };
      };
    };
    /** @description Unauthorized */
    SocketUnauthorized: {
      content: {
        "application/json": {
          error: {
            /** @default */
            message: string;
          };
        };
      };
    };
    /** @description Insufficient max_quota for API method */
    SocketForbidden: {
      content: {
        "application/json": {
          error: {
            /** @default */
            message: string;
          };
        };
      };
    };
    /** @description Resource not found */
    SocketNotFoundResponse: {
      content: {
        "application/json": {
          error: {
            /** @default */
            message: string;
          };
        };
      };
    };
    /** @description Insufficient quota for API route */
    SocketTooManyRequestsResponse: {
      headers: {
        /**
         * @description Retry contacting the endpoint *at least* after seconds.
         * See https://tools.ietf.org/html/rfc7231#section-7.1.3
         */
        "Retry-After"?: number;
      };
      content: {
        "application/json": {
          error: {
            /** @default */
            message: string;
          };
        };
      };
    };
    /** @description Internal server error */
    SocketInternalServerError: {
      content: {
        "application/json": {
          error: {
            /** @default */
            message: string;
          };
        };
      };
    };
    /** @description Gone */
    SocketGone: {
      content: {
        "application/json": {
          error: {
            /** @default */
            message: string;
          };
        };
      };
    };
  };
  parameters: never;
  requestBodies: {
  };
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get Packages (Beta)
   * @description Batch retrieval of package metadata and alerts by PURL strings. Compatible witch CycloneDX reports.
   *
   * Package URLs (PURLs) are an ecosystem agnostic way to identify packages.
   * CycloneDX SBOMs use the purl format to identify components.
   * This endpoint supports fetching metadata and alerts for multiple packages at once by passing an array of purl strings, or by passing an entire CycloneDX report.
   *
   * More information on purl and CycloneDX:
   *
   * - [`purl` Spec](https://github.com/package-url/purl-spec)
   * - [CycloneDX Spec](https://cyclonedx.org/specification/overview/#components)
   *
   * This endpoint returns the latest available alert data for artifacts in the batch (stale while revalidate).
   * Actively running analysis will be returned when available on subsequent runs.
   *
   * ## Examples:
   *
   * ### Looking up an npm package:
   *
   * ```json
   * {
   *   "components": [
   *     {
   *       "purl": "pkg:npm/express@4.19.2"
   *     }
   *   ]
   * }
   * ```
   *
   * ### Looking up an PyPi package:
   *
   * ```json
   * {
   *   "components": [
   *     {
   *       "purl": "pkg:pypi/django@5.0.6"
   *     }
   *   ]
   * }
   * ```
   *
   * ### Looking up a Maven package:
   *
   * ```json
   * {
   *   "components": [
   *     {
   *       "purl": "pkg:maven/log4j/log4j@1.2.17"
   *     }
   *   ]
   * }
   * ```
   *
   * ### Batch lookup
   *
   * ```json
   * {
   *   "components": [
   *     {
   *       "purl": "pkg:npm/express@4.19.2"
   *     },
   *     {
   *       "purl": "pkg:pypi/django@5.0.6"
   *     },
   *     {
   *       "purl": "pkg:maven/log4j/log4j@1.2.17"
   *     }
   *   ]
   * }
   * ```
   *
   * This endpoint consumes 100 units of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - packages:list
   */
  batchPackageFetch: {
    parameters: {
      query?: {
        /** @description Include detailed license information, including location and match strength, for each license datum. */
        licensedetails?: boolean;
        /** @description Include license attribution data, including license text and author information. Maps attribution/license text to a list of data objects to which that attribution info applies. */
        licenseattrib?: boolean;
        /** @description Include alert metadata. */
        alerts?: boolean;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SocketBatchPURLFetch"];
      };
    };
    responses: {
      /** @description Socket issue lists and scores for all packages */
      200: {
        content: {
          "application/x-ndjson": components["schemas"]["SocketArtifact"];
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * License Policy (Beta)
   * @description Compare the license data found for a list of packages (as PURL strings) with a configurable license allow list,
   * returning information about license data which does not comply with the license allow list.
   *
   * ## Allow List Schema
   *
   * ```json
   * {
   *   allowedApprovalSources?: Array<"fsf" | "osi">,
   *   allowedFamilies?: Array<"copyleft" | "permissive">,
   *   allowedTiers?: Array<PermissiveTier | CopyleftTier>,
   *   allowedStrings?: Array<string>
   *   allowedPURLs?: Array<string>
   *   focusAlertsHere?: boolean
   * }
   * ```
   *
   * where
   *
   * PermissiveTier ::= "model permissive" | "gold" | "silver" | "bronze" | "lead"
   * CopyleftTier ::= "maximal copyleft" | "network copyleft" | "strong copyleft" | "weak copyleft"
   *
   * readers can learn more about [copyleft tiers](https://blueoakcouncil.org/copyleft) and [permissive tiers](https://blueoakcouncil.org/list) by reading the linked resources.
   *
   * ## Return value
   *
   * For each requested PURL, an array is returned. Each array contains a list of license policy violations
   * detected for the requested PURL.
   *
   * Violations are accompanied by a string identifying the offending license data as `spdxAtomOrExtraData`,
   * a message describing why the license data is believed to be incompatible with the license policy, and a list
   * of locations (by filepath or other provenance information) where the offending license data may be found.
   *
   * ```json
   * Array<
   *   Array<{
   *     purl: string,
   *     spdxAtomOrExtraData: string,
   *     violationExplanation: string,
   *     filepathOrProvenance: Array<string>
   *   }>
   * >
   * ```
   *
   * ### Example request bodies:
   * ```json
   * {
   *   "components": [
   *     {
   *       "purl": "pkg:pypi/alt-aiohttp-cors@0.7.1?artifact_id=tar-gz"
   *     },
   *     {
   *       "purl": "pkg:npm/express@4.19.2"
   *     }
   *   ],
   *   "license_allow_list": {
   *     "allowedApprovalSources: ["fsf", "osi"],
   *     "allowedFamilies": ["permissive"],
   *     "allowedStrings": ["License :: OSI Approved :: BSD License", "UniqueLicense-2.0"]
   *   }
   * }
   * ```
   *
   * This endpoint consumes 100 units of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - packages:list
   */
  licensePolicy: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["LicenseAllowListRequest"];
      };
    };
    responses: {
      /** @description Socket issue lists and scores for all packages */
      200: {
        content: {
          "application/x-ndjson": {
              /** @default */
              spdxAtomOrExtraData: string;
              /** @default */
              violationExplanation: string;
              /** @default */
              purl: string;
              filepathOrProvenance: string[];
            }[];
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
      500: components["responses"]["SocketInternalServerError"];
    };
  };
  /**
   * Saturate License Policy (Beta)
   * @description Get the "saturated" version of a license policy's allow list, filling in the entire set of allowed
   * license data. For example, the saturated form of a license allow list which only specifies that
   * licenses in the tier "maximal copyleft" are allowed is shown below (note the expanded `allowedStrings` property):
   *
   * ```json
   * {
   *   "allowedApprovalSources": [],
   *   "allowedFamilies": [],
   *   "allowedTiers": [
   *     "maximal copyleft"
   *   ],
   *   "allowedStrings": [
   *     "Parity-6.0.0",
   *     "QPL-1.0-INRIA-2004",
   *     "QPL-1.0",
   *     "RPL-1.1",
   *     "RPL-1.5"
   *   ],
   *   "allowedPURLs": [],
   *   "focusAlertsHere": false
   * }
   * ```
   *
   * This may be helpful for users who want to compose more complex sets of allowed license data via
   * the "allowedStrings" property, or for users who want to know more about the contents of a particular
   * license group (family, tier, or approval source).
   *
   * ## Allow List Schema
   *
   * ```json
   * ```
   *
   * where
   *
   * PermissiveTier ::= "model permissive" | "gold" | "silver" | "bronze" | "lead"
   * CopyleftTier ::= "maximal copyleft" | "network copyleft" | "strong copyleft" | "weak copyleft"
   *
   * ## Return Value
   *
   * The returned value has the same shape as a license allow list:
   *
   * ```json
   * {
   *   allowedApprovalSources?: Array<"fsf" | "osi">,
   *   allowedFamilies?: Array<"copyleft" | "permissive">,
   *   allowedTiers?: Array<PermissiveTier | CopyleftTier>,
   *   allowedStrings?: Array<string>
   *   allowedPURLs?: Array<string>
   *   focusAlertsHere?: boolean
   * }
   * ```
   *
   * where
   *
   * PermissiveTier ::= "model permissive" | "gold" | "silver" | "bronze" | "lead"
   * CopyleftTier ::= "maximal copyleft" | "network copyleft" | "strong copyleft" | "weak copyleft"
   *
   * readers can learn more about [copyleft tiers](https://blueoakcouncil.org/copyleft) and [permissive tiers](https://blueoakcouncil.org/list) by reading the linked resources.
   *
   * ### Example request bodies:
   * ```json
   * {
   *   "allowedApprovalSources": ["fsf"],
   *   "allowedPURLs": [],
   *   "allowedFamilies": ["copyleft"],
   *   "allowedTiers": ["model permissive"],
   *   "allowedStrings": ["License :: OSI Approved :: BSD License"],
   *   "focusAlertsHere": false
   * }
   * ```
   *
   * This endpoint consumes 100 units of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - packages:list
   */
  saturateLicensePolicy: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["LicenseAllowList"];
      };
    };
    responses: {
      /** @description Saturated License Allow List */
      200: {
        content: {
          "application/json": components["schemas"]["LicenseAllowList"];
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
      500: components["responses"]["SocketInternalServerError"];
    };
  };
  /**
   * Get Audit Log Events
   * @description Paginated list of audit log events.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - audit-log:list
   */
  getAuditLogEvents: {
    parameters: {
      query?: {
        /** @description Filter audit log events by type. Omit for all types. */
        type?: "BookDemo" | "CancelInvitation" | "ChangeMemberRole" | "ChangePlanSubscriptionSeats" | "ContactForm" | "CreateApiToken" | "CreateUser" | "GithubAppInstallation" | "JoinOrganization" | "JoinOrganizationByVcs" | "LinkAccount" | "RemoveMember" | "ResetInvitationLink" | "ResetOrganizationSettingToDefault" | "RotateApiToken" | "SendInvitation" | "SignIn" | "SignOut" | "Subscribe" | "SyncOrganization" | "TransferOwnership" | "UpdateAlertTriage" | "UpdateApiTokenCommitter" | "UpdateApiTokenName" | "UpdateApiTokenScopes" | "UpdateApiTokenVisibility" | "UpdateOrganizationSetting" | "UpgradeOrganizationPlan" | "VerifiedEmail" | "DeleteRepository" | "DeleteReport";
        /** @description Number of events per page */
        per_page?: number;
        /** @description Page token */
        page?: string;
        /** @description A Unix timestamp in seconds to filter results prior to this date. */
        from?: string;
      };
      path: {
        /** @description The slug of the organization */
        org_slug: string;
      };
    };
    responses: {
      /** @description The paginated list of events in an organizations audit log and the next page querystring token. */
      200: {
        content: {
          "application/json": {
            results: {
                /** @default */
                event_id?: string;
                /** @default */
                created_at?: string;
                /** @default */
                updated_at?: string;
                /** @default */
                country_code?: string;
                /** @default */
                organization_id?: string;
                /** @default */
                ip_address?: string;
                /** @default null */
                payload?: Record<string, never>;
                /** @default 0 */
                status_code?: number;
                /** @default */
                type?: string;
                /** @default */
                user_agent?: string;
                /** @default */
                user_id?: string;
                /** @default */
                user_email?: string;
                /** @default */
                user_image?: string;
                /** @default */
                organization_name?: string;
              }[];
            /** @default */
            nextPage: string;
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Export CycloneDX SBOM (Beta)
   * @description Export a Socket SBOM as a CycloneDX SBOM
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - report:read
   */
  exportCDX: {
    parameters: {
      query?: {
        /**
         * @description The person(s) who created the BOM.
         * Set this value if you're intending the modify the BOM and claim authorship.
         */
        author?: string;
        /** @description Dependency track project group */
        project_group?: string;
        /** @description Dependency track project name. Default use the directory name */
        project_name?: string;
        /** @description Dependency track project version */
        project_version?: string;
        /** @description Dependency track project id. Either provide the id or the project name and version together */
        project_id?: string;
      };
      path: {
        /** @description The slug of the organization */
        org_slug: string;
        /** @description The full scan OR sbom report ID */
        id: string;
      };
    };
    responses: {
      /** @description CycloneDX SBOM */
      200: {
        content: {
          "application/json": components["schemas"]["CDXManifestSchema"];
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Export SPDX SBOM (Beta)
   * @description Export a Socket SBOM as a SPDX SBOM
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - report:read
   */
  exportSPDX: {
    parameters: {
      query?: {
        /**
         * @description The person(s) who created the BOM.
         * Set this value if you're intending the modify the BOM and claim authorship.
         */
        author?: string;
        /** @description Dependency track project group */
        project_group?: string;
        /** @description Dependency track project name. Default use the directory name */
        project_name?: string;
        /** @description Dependency track project version */
        project_version?: string;
        /** @description Dependency track project id. Either provide the id or the project name and version together */
        project_id?: string;
      };
      path: {
        /** @description The slug of the organization */
        org_slug: string;
        /** @description The full scan OR sbom report ID */
        id: string;
      };
    };
    responses: {
      /** @description SPDX SBOM */
      200: {
        content: {
          "application/json": components["schemas"]["SPDXManifestSchema"];
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * List full scans
   * @description Returns a paginated list of all full scans in an org, excluding SBOM artifacts.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - full-scans:list
   */
  getOrgFullScanList: {
    parameters: {
      query?: {
        /** @description Specify Sort order. */
        sort?: "name" | "created_at";
        /** @description Specify sort direction. */
        direction?: "asc" | "desc";
        /** @description Specify the maximum number of results to return per page. */
        per_page?: number;
        /** @description The token specifying which page to return. */
        page?: number;
        /** @description A Unix timestamp in seconds that filters full-scans prior to the date. */
        from?: string;
        /** @description A repository slug to filter full-scans by. */
        repo?: string;
      };
      path: {
        /** @description The slug of the organization */
        org_slug: string;
      };
    };
    responses: {
      /** @description Lists repositories for the specified organization. The authenticated user must be a member of the organization. */
      200: {
        content: {
          "application/json": {
            results: {
                /** @default */
                id?: string;
                /** @default */
                created_at?: string;
                /** @default */
                updated_at?: string;
                /** @default */
                organization_id?: string;
                /** @default */
                organization_slug?: string;
                /** @default */
                repository_id?: string;
                committers?: string[];
                /** @default */
                repo?: string;
                /** @default */
                branch?: string;
                /** @default */
                commit_message?: string;
                /** @default */
                commit_hash?: string;
                /** @default 0 */
                pull_request?: number;
                /** @default */
                html_report_url?: string;
              }[];
            /** @default 0 */
            nextPage: number;
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Create full scan
   * @description Create a full scan from a set of package manifest files. Returns a full scan including all SBOM artifacts.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - full-scans:create
   */
  CreateOrgFullScan: {
    parameters: {
      query: {
        /** @description The slug of the repository to associate the full-scan with. */
        repo: string;
        /** @description The branch name to associate the full-scan with. */
        branch?: string;
        /** @description The commit message to associate the full-scan with. */
        commit_message?: string;
        /** @description The commit hash to associate the full-scan with. */
        commit_hash?: string;
        /** @description The pull request number to associate the full-scan with. */
        pull_request?: number;
        /** @description The committers to associate the full-scan with. Set query more than once to set multiple. */
        committers?: string;
        /** @description The integration type to associate the full-scan with. Defaults to "Api" if omitted. */
        integration_type?: "api" | "github" | "gitlab" | "bitbucket" | "azure";
        /** @description The integration org slug to associate the full-scan with. If omitted, the Socket org name will be used. This is used to generate links and badges. */
        integration_org_slug?: string;
        /** @description Set the default branch of the repository to the branch of this full-scan. A branch name is required with this option. */
        make_default_branch?: boolean;
        /** @description Designate this full-scan as the latest scan of a given branch. Default branch head scans are included in org alerts. */
        set_as_pending_head?: boolean;
        /** @description Create a temporary full-scan that is not listed in the reports dashboard. */
        tmp?: boolean;
      };
      path: {
        /** @description The slug of the organization */
        org_slug: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          [key: string]: never;
        };
      };
    };
    responses: {
      /** @description Upload manifest files to create a full scan in an org's repo */
      201: {
        content: {
          "application/json": {
            /** @default */
            id?: string;
            /** @default */
            created_at?: string;
            /** @default */
            updated_at?: string;
            /** @default */
            organization_id?: string;
            /** @default */
            organization_slug?: string;
            /** @default */
            repository_id?: string;
            committers?: string[];
            /** @default */
            repo?: string;
            /** @default */
            branch?: string;
            /** @default */
            commit_message?: string;
            /** @default */
            commit_hash?: string;
            /** @default 0 */
            pull_request?: number;
            /** @default */
            html_report_url?: string;
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Stream full scan
   * @description Stream all SBOM artifacts for a full scan.
   *
   * This endpoint returns the latest, available alert data for artifacts in the full scan (stale while revalidate).
   * Actively running analysis will be returned when available on subsequent runs.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - full-scans:list
   */
  getOrgFullScan: {
    parameters: {
      path: {
        /** @description The slug of the organization */
        org_slug: string;
        /** @description The ID of the full scan */
        full_scan_id: string;
      };
    };
    responses: {
      /** @description Socket issue lists and scores for all packages */
      200: {
        content: {
          "application/x-ndjson": components["schemas"]["SocketArtifact"];
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Delete full scan
   * @description Delete an existing full scan.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - full-scans:delete
   */
  deleteOrgFullScan: {
    parameters: {
      path: {
        /** @description The slug of the organization */
        org_slug: string;
        /** @description The ID of the full scan */
        full_scan_id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            /** @default ok */
            status: string;
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Get full scan metadata
   * @description Get metadata for a single full scan
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - full-scans:list
   */
  getOrgFullScanMetadata: {
    parameters: {
      path: {
        /** @description The slug of the organization */
        org_slug: string;
        /** @description The ID of the full scan */
        full_scan_id: string;
      };
    };
    responses: {
      /** @description The data from the full scan */
      200: {
        content: {
          "application/json": {
            /** @default */
            id?: string;
            /** @default */
            created_at?: string;
            /** @default */
            updated_at?: string;
            /** @default */
            organization_id?: string;
            /** @default */
            organization_slug?: string;
            /** @default */
            repository_id?: string;
            committers?: string[];
            /** @default */
            repo?: string;
            /** @default */
            branch?: string;
            /** @default */
            commit_message?: string;
            /** @default */
            commit_hash?: string;
            /** @default 0 */
            pull_request?: number;
            /** @default */
            html_report_url?: string;
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Diff Full Scans
   * @description Get the difference between two Full Scans.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - full-scans:list
   */
  GetOrgDiffScan: {
    parameters: {
      query: {
        /** @description The base full scan ID */
        before: string;
        /** @description The base full scan ID */
        after: string;
      };
      path: {
        /** @description The slug of the organization */
        org_slug: string;
      };
    };
    responses: {
      /** @description The differnce between the two provided Full Scans. */
      200: {
        content: {
          "application/json": {
            before: {
              /** @default */
              repository_id: string;
              /** @default */
              branch: string;
              /** @default */
              id: string;
              /** @default */
              commit_message: string | null;
              /** @default */
              commit_hash: string | null;
              /** @default 0 */
              pull_request: number | null;
              committers: string[];
              /** @default */
              organization_id: string;
            };
            after: {
              /** @default */
              repository_id: string;
              /** @default */
              branch: string;
              /** @default */
              id: string;
              /** @default */
              commit_message: string | null;
              /** @default */
              commit_hash: string | null;
              /** @default 0 */
              pull_request: number | null;
              committers: string[];
              /** @default */
              organization_id: string;
            };
            artifacts: {
              added: ({
                  /** @default */
                  diffType?: string;
                  base?: {
                    /** @default false */
                    direct?: boolean;
                    toplevelAncestors?: string[] | null;
                  };
                  head?: {
                    /** @default false */
                    direct?: boolean;
                    toplevelAncestors?: string[] | null;
                  };
                  /** @default */
                  id?: string;
                  /** @default */
                  type?: string;
                  /** @default */
                  name?: string;
                  /** @default */
                  namespace?: string | null;
                  /** @default */
                  files?: string;
                  /** @default */
                  version?: string | null;
                  /** @default */
                  subpath?: string | null;
                  /** @default */
                  artifact_id?: string | null;
                  /** @default */
                  artifactId?: string | null;
                  qualifiers?: unknown;
                  scores?: {
                    /** @default 0 */
                    supplyChain: number;
                    /** @default 0 */
                    quality: number;
                    /** @default 0 */
                    maintenance: number;
                    /** @default 0 */
                    vulnerability: number;
                    /** @default 0 */
                    license: number;
                    /** @default 0 */
                    overall: number;
                  };
                  capabilities?: {
                    /** @default false */
                    env: boolean;
                    /** @default false */
                    eval: boolean;
                    /** @default false */
                    fs: boolean;
                    /** @default false */
                    net: boolean;
                    /** @default false */
                    shell: boolean;
                    /** @default false */
                    unsafe: boolean;
                  };
                  /** @default */
                  license?: string;
                  /** @default 0 */
                  size?: number;
                  /** @default */
                  author?: string;
                  /** @default */
                  state?: string;
                  /** @default */
                  error?: string;
                  alerts?: {
                      /** @default */
                      key: string;
                      /** @default 0 */
                      type: number;
                      /** @default */
                      file?: string;
                      /** @default 0 */
                      start?: number;
                      /** @default 0 */
                      end?: number;
                      /** @default null */
                      props?: Record<string, never>;
                      /** @default */
                      action?: string;
                      /** @default 0 */
                      actionPolicyIndex?: number;
                    }[];
                  licenseDetails?: {
                      authors?: string[];
                      /** @default 0 */
                      charEnd?: number;
                      /** @default 0 */
                      charStart?: number;
                      /** @default */
                      filepath?: string;
                      /** @default 0 */
                      match_strength?: number;
                      /** @default */
                      filehash?: string;
                      /** @default */
                      provenance?: string;
                      spdxDisj?: {
                            /** @default */
                            licenseId?: string;
                            /** @default */
                            licenseExceptionId?: string;
                          }[][];
                    }[];
                  licenseAttrib?: ({
                      /** @default */
                      attribText: string;
                      attribData: ({
                          /** @default */
                          purl: string;
                          /** @default */
                          foundInFilepath: string | null;
                          foundAuthors: string[];
                          /** @default */
                          spdxExpr: string | null;
                        })[];
                    })[];
                })[];
              removed: ({
                  /** @default */
                  diffType?: string;
                  base?: {
                    /** @default false */
                    direct?: boolean;
                    toplevelAncestors?: string[] | null;
                  };
                  head?: {
                    /** @default false */
                    direct?: boolean;
                    toplevelAncestors?: string[] | null;
                  };
                  /** @default */
                  id?: string;
                  /** @default */
                  type?: string;
                  /** @default */
                  name?: string;
                  /** @default */
                  namespace?: string | null;
                  /** @default */
                  files?: string;
                  /** @default */
                  version?: string | null;
                  /** @default */
                  subpath?: string | null;
                  /** @default */
                  artifact_id?: string | null;
                  /** @default */
                  artifactId?: string | null;
                  qualifiers?: unknown;
                  scores?: {
                    /** @default 0 */
                    supplyChain: number;
                    /** @default 0 */
                    quality: number;
                    /** @default 0 */
                    maintenance: number;
                    /** @default 0 */
                    vulnerability: number;
                    /** @default 0 */
                    license: number;
                    /** @default 0 */
                    overall: number;
                  };
                  capabilities?: {
                    /** @default false */
                    env: boolean;
                    /** @default false */
                    eval: boolean;
                    /** @default false */
                    fs: boolean;
                    /** @default false */
                    net: boolean;
                    /** @default false */
                    shell: boolean;
                    /** @default false */
                    unsafe: boolean;
                  };
                  /** @default */
                  license?: string;
                  /** @default 0 */
                  size?: number;
                  /** @default */
                  author?: string;
                  /** @default */
                  state?: string;
                  /** @default */
                  error?: string;
                  alerts?: {
                      /** @default */
                      key: string;
                      /** @default 0 */
                      type: number;
                      /** @default */
                      file?: string;
                      /** @default 0 */
                      start?: number;
                      /** @default 0 */
                      end?: number;
                      /** @default null */
                      props?: Record<string, never>;
                      /** @default */
                      action?: string;
                      /** @default 0 */
                      actionPolicyIndex?: number;
                    }[];
                  licenseDetails?: {
                      authors?: string[];
                      /** @default 0 */
                      charEnd?: number;
                      /** @default 0 */
                      charStart?: number;
                      /** @default */
                      filepath?: string;
                      /** @default 0 */
                      match_strength?: number;
                      /** @default */
                      filehash?: string;
                      /** @default */
                      provenance?: string;
                      spdxDisj?: {
                            /** @default */
                            licenseId?: string;
                            /** @default */
                            licenseExceptionId?: string;
                          }[][];
                    }[];
                  licenseAttrib?: ({
                      /** @default */
                      attribText: string;
                      attribData: ({
                          /** @default */
                          purl: string;
                          /** @default */
                          foundInFilepath: string | null;
                          foundAuthors: string[];
                          /** @default */
                          spdxExpr: string | null;
                        })[];
                    })[];
                })[];
              unchanged: ({
                  /** @default */
                  diffType?: string;
                  base?: {
                    /** @default false */
                    direct?: boolean;
                    toplevelAncestors?: string[] | null;
                  };
                  head?: {
                    /** @default false */
                    direct?: boolean;
                    toplevelAncestors?: string[] | null;
                  };
                  /** @default */
                  id?: string;
                  /** @default */
                  type?: string;
                  /** @default */
                  name?: string;
                  /** @default */
                  namespace?: string | null;
                  /** @default */
                  files?: string;
                  /** @default */
                  version?: string | null;
                  /** @default */
                  subpath?: string | null;
                  /** @default */
                  artifact_id?: string | null;
                  /** @default */
                  artifactId?: string | null;
                  qualifiers?: unknown;
                  scores?: {
                    /** @default 0 */
                    supplyChain: number;
                    /** @default 0 */
                    quality: number;
                    /** @default 0 */
                    maintenance: number;
                    /** @default 0 */
                    vulnerability: number;
                    /** @default 0 */
                    license: number;
                    /** @default 0 */
                    overall: number;
                  };
                  capabilities?: {
                    /** @default false */
                    env: boolean;
                    /** @default false */
                    eval: boolean;
                    /** @default false */
                    fs: boolean;
                    /** @default false */
                    net: boolean;
                    /** @default false */
                    shell: boolean;
                    /** @default false */
                    unsafe: boolean;
                  };
                  /** @default */
                  license?: string;
                  /** @default 0 */
                  size?: number;
                  /** @default */
                  author?: string;
                  /** @default */
                  state?: string;
                  /** @default */
                  error?: string;
                  alerts?: {
                      /** @default */
                      key: string;
                      /** @default 0 */
                      type: number;
                      /** @default */
                      file?: string;
                      /** @default 0 */
                      start?: number;
                      /** @default 0 */
                      end?: number;
                      /** @default null */
                      props?: Record<string, never>;
                      /** @default */
                      action?: string;
                      /** @default 0 */
                      actionPolicyIndex?: number;
                    }[];
                  licenseDetails?: {
                      authors?: string[];
                      /** @default 0 */
                      charEnd?: number;
                      /** @default 0 */
                      charStart?: number;
                      /** @default */
                      filepath?: string;
                      /** @default 0 */
                      match_strength?: number;
                      /** @default */
                      filehash?: string;
                      /** @default */
                      provenance?: string;
                      spdxDisj?: {
                            /** @default */
                            licenseId?: string;
                            /** @default */
                            licenseExceptionId?: string;
                          }[][];
                    }[];
                  licenseAttrib?: ({
                      /** @default */
                      attribText: string;
                      attribData: ({
                          /** @default */
                          purl: string;
                          /** @default */
                          foundInFilepath: string | null;
                          foundAuthors: string[];
                          /** @default */
                          spdxExpr: string | null;
                        })[];
                    })[];
                })[];
              replaced: ({
                  /** @default */
                  diffType?: string;
                  base?: {
                    /** @default false */
                    direct?: boolean;
                    toplevelAncestors?: string[] | null;
                  };
                  head?: {
                    /** @default false */
                    direct?: boolean;
                    toplevelAncestors?: string[] | null;
                  };
                  /** @default */
                  id?: string;
                  /** @default */
                  type?: string;
                  /** @default */
                  name?: string;
                  /** @default */
                  namespace?: string | null;
                  /** @default */
                  files?: string;
                  /** @default */
                  version?: string | null;
                  /** @default */
                  subpath?: string | null;
                  /** @default */
                  artifact_id?: string | null;
                  /** @default */
                  artifactId?: string | null;
                  qualifiers?: unknown;
                  scores?: {
                    /** @default 0 */
                    supplyChain: number;
                    /** @default 0 */
                    quality: number;
                    /** @default 0 */
                    maintenance: number;
                    /** @default 0 */
                    vulnerability: number;
                    /** @default 0 */
                    license: number;
                    /** @default 0 */
                    overall: number;
                  };
                  capabilities?: {
                    /** @default false */
                    env: boolean;
                    /** @default false */
                    eval: boolean;
                    /** @default false */
                    fs: boolean;
                    /** @default false */
                    net: boolean;
                    /** @default false */
                    shell: boolean;
                    /** @default false */
                    unsafe: boolean;
                  };
                  /** @default */
                  license?: string;
                  /** @default 0 */
                  size?: number;
                  /** @default */
                  author?: string;
                  /** @default */
                  state?: string;
                  /** @default */
                  error?: string;
                  alerts?: {
                      /** @default */
                      key: string;
                      /** @default 0 */
                      type: number;
                      /** @default */
                      file?: string;
                      /** @default 0 */
                      start?: number;
                      /** @default 0 */
                      end?: number;
                      /** @default null */
                      props?: Record<string, never>;
                      /** @default */
                      action?: string;
                      /** @default 0 */
                      actionPolicyIndex?: number;
                    }[];
                  licenseDetails?: {
                      authors?: string[];
                      /** @default 0 */
                      charEnd?: number;
                      /** @default 0 */
                      charStart?: number;
                      /** @default */
                      filepath?: string;
                      /** @default 0 */
                      match_strength?: number;
                      /** @default */
                      filehash?: string;
                      /** @default */
                      provenance?: string;
                      spdxDisj?: {
                            /** @default */
                            licenseId?: string;
                            /** @default */
                            licenseExceptionId?: string;
                          }[][];
                    }[];
                  licenseAttrib?: ({
                      /** @default */
                      attribText: string;
                      attribData: ({
                          /** @default */
                          purl: string;
                          /** @default */
                          foundInFilepath: string | null;
                          foundAuthors: string[];
                          /** @default */
                          spdxExpr: string | null;
                        })[];
                    })[];
                })[];
              updated: ({
                  /** @default */
                  diffType?: string;
                  base?: {
                    /** @default false */
                    direct?: boolean;
                    toplevelAncestors?: string[] | null;
                  };
                  head?: {
                    /** @default false */
                    direct?: boolean;
                    toplevelAncestors?: string[] | null;
                  };
                  /** @default */
                  id?: string;
                  /** @default */
                  type?: string;
                  /** @default */
                  name?: string;
                  /** @default */
                  namespace?: string | null;
                  /** @default */
                  files?: string;
                  /** @default */
                  version?: string | null;
                  /** @default */
                  subpath?: string | null;
                  /** @default */
                  artifact_id?: string | null;
                  /** @default */
                  artifactId?: string | null;
                  qualifiers?: unknown;
                  scores?: {
                    /** @default 0 */
                    supplyChain: number;
                    /** @default 0 */
                    quality: number;
                    /** @default 0 */
                    maintenance: number;
                    /** @default 0 */
                    vulnerability: number;
                    /** @default 0 */
                    license: number;
                    /** @default 0 */
                    overall: number;
                  };
                  capabilities?: {
                    /** @default false */
                    env: boolean;
                    /** @default false */
                    eval: boolean;
                    /** @default false */
                    fs: boolean;
                    /** @default false */
                    net: boolean;
                    /** @default false */
                    shell: boolean;
                    /** @default false */
                    unsafe: boolean;
                  };
                  /** @default */
                  license?: string;
                  /** @default 0 */
                  size?: number;
                  /** @default */
                  author?: string;
                  /** @default */
                  state?: string;
                  /** @default */
                  error?: string;
                  alerts?: {
                      /** @default */
                      key: string;
                      /** @default 0 */
                      type: number;
                      /** @default */
                      file?: string;
                      /** @default 0 */
                      start?: number;
                      /** @default 0 */
                      end?: number;
                      /** @default null */
                      props?: Record<string, never>;
                      /** @default */
                      action?: string;
                      /** @default 0 */
                      actionPolicyIndex?: number;
                    }[];
                  licenseDetails?: {
                      authors?: string[];
                      /** @default 0 */
                      charEnd?: number;
                      /** @default 0 */
                      charStart?: number;
                      /** @default */
                      filepath?: string;
                      /** @default 0 */
                      match_strength?: number;
                      /** @default */
                      filehash?: string;
                      /** @default */
                      provenance?: string;
                      spdxDisj?: {
                            /** @default */
                            licenseId?: string;
                            /** @default */
                            licenseExceptionId?: string;
                          }[][];
                    }[];
                  licenseAttrib?: ({
                      /** @default */
                      attribText: string;
                      attribData: ({
                          /** @default */
                          purl: string;
                          /** @default */
                          foundInFilepath: string | null;
                          foundAuthors: string[];
                          /** @default */
                          spdxExpr: string | null;
                        })[];
                    })[];
                })[];
            };
            /** @default false */
            directDependenciesChanged: boolean;
            /** @default */
            diff_report_url: string;
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * List repositories
   * @description Lists repositories for the specified organization.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - repo:list
   */
  getOrgRepoList: {
    parameters: {
      query?: {
        sort?: string;
        direction?: string;
        per_page?: number;
        page?: number;
      };
      path: {
        /** @description The slug of the organization */
        org_slug: string;
      };
    };
    responses: {
      /** @description Lists repositories for the specified organization. The authenticated user must be a member of the organization. */
      200: {
        content: {
          "application/json": {
            results: ({
                /**
                 * @description The ID of the repository
                 * @default
                 */
                id?: string;
                /**
                 * @description The creation date of the repository
                 * @default
                 */
                created_at?: string;
                /**
                 * @description The last update date of the repository
                 * @default
                 */
                updated_at?: string;
                /**
                 * @description The slug of the repository
                 * @default
                 */
                slug?: string;
                /**
                 * @description The ID of the head full scan of the repository
                 * @default
                 */
                head_full_scan_id?: string;
                /**
                 * @description The name of the repository
                 * @default
                 */
                name?: string;
                /**
                 * @description The description of the repository
                 * @default
                 */
                description?: string;
                /**
                 * @description The homepage URL of the repository
                 * @default
                 */
                homepage?: string;
                /**
                 * @description The visibility of the repository
                 * @default private
                 * @enum {string}
                 */
                visibility?: "public" | "private";
                /**
                 * @description Whether the repository is archived or not
                 * @default false
                 */
                archived?: boolean;
                /**
                 * @description The default branch of the repository
                 * @default main
                 */
                default_branch?: string;
              })[];
            /** @default 0 */
            nextPage: number;
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Create repository
   * @description Create a repository.
   *
   * Repos collect Full scans and Diff scans and are typically associated with a git repo.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - repo:create
   */
  createOrgRepo: {
    parameters: {
      path: {
        /** @description The slug of the organization */
        org_slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The name of the repository
           * @default
           */
          name?: string;
          /**
           * @description The description of the repository
           * @default
           */
          description?: string;
          /**
           * @description The homepage URL of the repository
           * @default
           */
          homepage?: string;
          /**
           * @description The visibility of the repository
           * @default private
           * @enum {string}
           */
          visibility?: "public" | "private";
          /**
           * @description Whether the repository is archived or not
           * @default false
           */
          archived?: boolean;
          /**
           * @description The default branch of the repository
           * @default main
           */
          default_branch?: string;
        };
      };
    };
    responses: {
      /** @description Lists repositories for the specified organization. The authenticated user must be a member of the organization. */
      201: {
        content: {
          "application/json": {
            /**
             * @description The ID of the repository
             * @default
             */
            id?: string;
            /**
             * @description The creation date of the repository
             * @default
             */
            created_at?: string;
            /**
             * @description The last update date of the repository
             * @default
             */
            updated_at?: string;
            /**
             * @description The slug of the repository
             * @default
             */
            slug?: string;
            /**
             * @description The ID of the head full scan of the repository
             * @default
             */
            head_full_scan_id?: string;
            /**
             * @description The name of the repository
             * @default
             */
            name?: string;
            /**
             * @description The description of the repository
             * @default
             */
            description?: string;
            /**
             * @description The homepage URL of the repository
             * @default
             */
            homepage?: string;
            /**
             * @description The visibility of the repository
             * @default private
             * @enum {string}
             */
            visibility?: "public" | "private";
            /**
             * @description Whether the repository is archived or not
             * @default false
             */
            archived?: boolean;
            /**
             * @description The default branch of the repository
             * @default main
             */
            default_branch?: string;
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Get repository
   * @description Retrieve a repository associated with an organization.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - repo:list
   */
  getOrgRepo: {
    parameters: {
      path: {
        /** @description The slug of the organization */
        org_slug: string;
        /** @description The slug of the repository */
        repo_slug: string;
      };
    };
    responses: {
      /** @description Lists repositories for the specified organization. The authenticated user must be a member of the organization. */
      200: {
        content: {
          "application/json": {
            /**
             * @description The ID of the repository
             * @default
             */
            id?: string;
            /**
             * @description The creation date of the repository
             * @default
             */
            created_at?: string;
            /**
             * @description The last update date of the repository
             * @default
             */
            updated_at?: string;
            /**
             * @description The slug of the repository
             * @default
             */
            slug?: string;
            /**
             * @description The ID of the head full scan of the repository
             * @default
             */
            head_full_scan_id?: string;
            /**
             * @description The name of the repository
             * @default
             */
            name?: string;
            /**
             * @description The description of the repository
             * @default
             */
            description?: string;
            /**
             * @description The homepage URL of the repository
             * @default
             */
            homepage?: string;
            /**
             * @description The visibility of the repository
             * @default private
             * @enum {string}
             */
            visibility?: "public" | "private";
            /**
             * @description Whether the repository is archived or not
             * @default false
             */
            archived?: boolean;
            /**
             * @description The default branch of the repository
             * @default main
             */
            default_branch?: string;
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Update repository
   * @description Update details of an existing repository.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - repo:update
   */
  updateOrgRepo: {
    parameters: {
      path: {
        /** @description The slug of the organization */
        org_slug: string;
        /** @description The slug of the repository */
        repo_slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The name of the repository
           * @default
           */
          name?: string;
          /**
           * @description The description of the repository
           * @default
           */
          description?: string;
          /**
           * @description The homepage URL of the repository
           * @default
           */
          homepage?: string;
          /**
           * @description The visibility of the repository
           * @default private
           * @enum {string}
           */
          visibility?: "public" | "private";
          /**
           * @description Whether the repository is archived or not
           * @default false
           */
          archived?: boolean;
          /**
           * @description The default branch of the repository
           * @default main
           */
          default_branch?: string;
        };
      };
    };
    responses: {
      /** @description Updated repository details */
      200: {
        content: {
          "application/json": {
            /**
             * @description The ID of the repository
             * @default
             */
            id?: string;
            /**
             * @description The creation date of the repository
             * @default
             */
            created_at?: string;
            /**
             * @description The last update date of the repository
             * @default
             */
            updated_at?: string;
            /**
             * @description The slug of the repository
             * @default
             */
            slug?: string;
            /**
             * @description The ID of the head full scan of the repository
             * @default
             */
            head_full_scan_id?: string;
            /**
             * @description The name of the repository
             * @default
             */
            name?: string;
            /**
             * @description The description of the repository
             * @default
             */
            description?: string;
            /**
             * @description The homepage URL of the repository
             * @default
             */
            homepage?: string;
            /**
             * @description The visibility of the repository
             * @default private
             * @enum {string}
             */
            visibility?: "public" | "private";
            /**
             * @description Whether the repository is archived or not
             * @default false
             */
            archived?: boolean;
            /**
             * @description The default branch of the repository
             * @default main
             */
            default_branch?: string;
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Delete repository
   * @description Delete a single repository and all of its associated Full scans and Diff scans.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - repo:delete
   */
  deleteOrgRepo: {
    parameters: {
      path: {
        /** @description The slug of the organization */
        org_slug: string;
        /** @description The slug of the repository */
        repo_slug: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            /** @default ok */
            status: string;
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * List Org Alert Triage
   * @description Get alert triage actions for an organization.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - triage:alerts-list
   */
  getOrgTriage: {
    parameters: {
      query?: {
        sort?: string;
        direction?: string;
        per_page?: number;
        page?: number;
      };
      path: {
        /** @description The slug of the organization */
        org_slug: string;
      };
    };
    responses: {
      /** @description Lists triage actions for the specified organization. */
      200: {
        content: {
          "application/json": {
            results: ({
                /**
                 * @description The alert_key associated with the triage state
                 * @default
                 */
                alert_key?: string;
                /**
                 * @description The creation date of the triage action
                 * @default
                 */
                created_at?: string;
                /**
                 * @description The last update date of the triage action
                 * @default
                 */
                updated_at?: string;
                /**
                 * @description The note associated with the triage action
                 * @default
                 */
                note?: string;
                /**
                 * @description The organization id associated with the triage action
                 * @default
                 */
                organization_id?: string;
                /**
                 * @description The triage state of the alert
                 * @default inherit
                 * @enum {string}
                 */
                state?: "block" | "ignore" | "inherit" | "monitor" | "warn";
              })[];
            /** @default 0 */
            nextPage: number;
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Update Org Alert Triage
   * @description Update triage actions on organizaton alerts.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - triage:alerts-update
   */
  updateOrgAlertTriage: {
    parameters: {
      path: {
        /** @description The slug of the organization */
        org_slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          alertTriage: ({
              /** @default */
              alertKey?: string;
              /** @default */
              note?: string;
              /**
               * @description The triage state of the alert
               * @enum {string}
               */
              state?: "block" | "ignore" | "inherit" | "monitor" | "warn";
            })[];
        };
      };
    };
    responses: {
      /** @description Updated Alert Triage */
      202: {
        content: {
          "application/json": {
            /** @default */
            result: string;
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Get integration events
   * @description Retrieve events for integration.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - integration:list
   */
  getIntegrationEvents: {
    parameters: {
      path: {
        /** @description The slug of the organization */
        org_slug: string;
        /** @description The id of the integration */
        integration_id: string;
      };
    };
    responses: {
      /** @description Lists events for the specified integration. The authenticated user must be a member of the organization. */
      200: {
        content: {
          "application/json": {
              /** @default */
              id: string;
              /** @default */
              integration_id: string;
              /** @default */
              type: string;
              payload: Record<string, never>;
              /** @default 0 */
              status_code: number;
              /** @default */
              error: string;
              /** @default */
              sent_at: string;
              retry_info: {
                  /** @default 0 */
                  status_code: number;
                  /** @default */
                  error: string;
                  /** @default */
                  sent_at: string;
                }[];
              /** @default */
              created_at: string;
              /** @default */
              updated_at: string;
            }[];
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Get Organization Security Policy
   * @description Retrieve the security policy of an organization.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - security-policy:read
   */
  getOrgSecurityPolicy: {
    parameters: {
      query?: {
        /** @description Return only customized security policy rules. */
        custom_rules_only?: boolean;
      };
      path: {
        /** @description The slug of the organization */
        org_slug: string;
      };
    };
    responses: {
      /** @description Retrieved security policy details */
      200: {
        content: {
          "application/json": {
            securityPolicyRules?: {
              gptSecurity?: {
                /**
                 * @description The action to take for gptSecurity issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              gptAnomaly?: {
                /**
                 * @description The action to take for gptAnomaly issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              gptMalware?: {
                /**
                 * @description The action to take for gptMalware issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              filesystemAccess?: {
                /**
                 * @description The action to take for filesystemAccess issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              networkAccess?: {
                /**
                 * @description The action to take for networkAccess issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              shellAccess?: {
                /**
                 * @description The action to take for shellAccess issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              debugAccess?: {
                /**
                 * @description The action to take for debugAccess issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              criticalCVE?: {
                /**
                 * @description The action to take for criticalCVE issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              cve?: {
                /**
                 * @description The action to take for cve issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              mediumCVE?: {
                /**
                 * @description The action to take for mediumCVE issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              mildCVE?: {
                /**
                 * @description The action to take for mildCVE issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              emptyPackage?: {
                /**
                 * @description The action to take for emptyPackage issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              trivialPackage?: {
                /**
                 * @description The action to take for trivialPackage issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              noREADME?: {
                /**
                 * @description The action to take for noREADME issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              shrinkwrap?: {
                /**
                 * @description The action to take for shrinkwrap issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              licenseSpdxDisj?: {
                /**
                 * @description The action to take for licenseSpdxDisj issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              unsafeCopyright?: {
                /**
                 * @description The action to take for unsafeCopyright issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              licenseChange?: {
                /**
                 * @description The action to take for licenseChange issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              nonOSILicense?: {
                /**
                 * @description The action to take for nonOSILicense issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              deprecatedLicense?: {
                /**
                 * @description The action to take for deprecatedLicense issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              missingLicense?: {
                /**
                 * @description The action to take for missingLicense issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              nonSPDXLicense?: {
                /**
                 * @description The action to take for nonSPDXLicense issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              unclearLicense?: {
                /**
                 * @description The action to take for unclearLicense issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              mixedLicense?: {
                /**
                 * @description The action to take for mixedLicense issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              notice?: {
                /**
                 * @description The action to take for notice issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              modifiedLicense?: {
                /**
                 * @description The action to take for modifiedLicense issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              modifiedException?: {
                /**
                 * @description The action to take for modifiedException issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              licenseException?: {
                /**
                 * @description The action to take for licenseException issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              deprecatedException?: {
                /**
                 * @description The action to take for deprecatedException issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              miscLicenseIssues?: {
                /**
                 * @description The action to take for miscLicenseIssues issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              unidentifiedLicense?: {
                /**
                 * @description The action to take for unidentifiedLicense issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              noLicenseFound?: {
                /**
                 * @description The action to take for noLicenseFound issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              explicitlyUnlicensedItem?: {
                /**
                 * @description The action to take for explicitlyUnlicensedItem issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              copyleftLicense?: {
                /**
                 * @description The action to take for copyleftLicense issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              nonpermissiveLicense?: {
                /**
                 * @description The action to take for nonpermissiveLicense issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              ambiguousClassifier?: {
                /**
                 * @description The action to take for ambiguousClassifier issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              invalidPackageJSON?: {
                /**
                 * @description The action to take for invalidPackageJSON issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              httpDependency?: {
                /**
                 * @description The action to take for httpDependency issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              gitDependency?: {
                /**
                 * @description The action to take for gitDependency issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              gitHubDependency?: {
                /**
                 * @description The action to take for gitHubDependency issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              fileDependency?: {
                /**
                 * @description The action to take for fileDependency issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              noTests?: {
                /**
                 * @description The action to take for noTests issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              noRepository?: {
                /**
                 * @description The action to take for noRepository issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              badSemver?: {
                /**
                 * @description The action to take for badSemver issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              badSemverDependency?: {
                /**
                 * @description The action to take for badSemverDependency issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              noV1?: {
                /**
                 * @description The action to take for noV1 issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              noWebsite?: {
                /**
                 * @description The action to take for noWebsite issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              noBugTracker?: {
                /**
                 * @description The action to take for noBugTracker issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              noAuthorData?: {
                /**
                 * @description The action to take for noAuthorData issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              typeModuleCompatibility?: {
                /**
                 * @description The action to take for typeModuleCompatibility issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              floatingDependency?: {
                /**
                 * @description The action to take for floatingDependency issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              manifestConfusion?: {
                /**
                 * @description The action to take for manifestConfusion issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              malware?: {
                /**
                 * @description The action to take for malware issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              telemetry?: {
                /**
                 * @description The action to take for telemetry issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              troll?: {
                /**
                 * @description The action to take for troll issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              deprecated?: {
                /**
                 * @description The action to take for deprecated issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              chronoAnomaly?: {
                /**
                 * @description The action to take for chronoAnomaly issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              compromisedSSHKey?: {
                /**
                 * @description The action to take for compromisedSSHKey issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              semverAnomaly?: {
                /**
                 * @description The action to take for semverAnomaly issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              newAuthor?: {
                /**
                 * @description The action to take for newAuthor issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              unstableOwnership?: {
                /**
                 * @description The action to take for unstableOwnership issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              missingAuthor?: {
                /**
                 * @description The action to take for missingAuthor issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              unmaintained?: {
                /**
                 * @description The action to take for unmaintained issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              unpublished?: {
                /**
                 * @description The action to take for unpublished issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              majorRefactor?: {
                /**
                 * @description The action to take for majorRefactor issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              missingTarball?: {
                /**
                 * @description The action to take for missingTarball issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              suspiciousStarActivity?: {
                /**
                 * @description The action to take for suspiciousStarActivity issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              unpopularPackage?: {
                /**
                 * @description The action to take for unpopularPackage issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              socketUpgradeAvailable?: {
                /**
                 * @description The action to take for socketUpgradeAvailable issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              longStrings?: {
                /**
                 * @description The action to take for longStrings issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              highEntropyStrings?: {
                /**
                 * @description The action to take for highEntropyStrings issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              urlStrings?: {
                /**
                 * @description The action to take for urlStrings issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              usesEval?: {
                /**
                 * @description The action to take for usesEval issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              dynamicRequire?: {
                /**
                 * @description The action to take for dynamicRequire issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              envVars?: {
                /**
                 * @description The action to take for envVars issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              missingDependency?: {
                /**
                 * @description The action to take for missingDependency issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              unusedDependency?: {
                /**
                 * @description The action to take for unusedDependency issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              peerDependency?: {
                /**
                 * @description The action to take for peerDependency issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              uncaughtOptionalDependency?: {
                /**
                 * @description The action to take for uncaughtOptionalDependency issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              unresolvedRequire?: {
                /**
                 * @description The action to take for unresolvedRequire issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              extraneousDependency?: {
                /**
                 * @description The action to take for extraneousDependency issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              obfuscatedRequire?: {
                /**
                 * @description The action to take for obfuscatedRequire issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              obfuscatedFile?: {
                /**
                 * @description The action to take for obfuscatedFile issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              minifiedFile?: {
                /**
                 * @description The action to take for minifiedFile issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              installScripts?: {
                /**
                 * @description The action to take for installScripts issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              hasNativeCode?: {
                /**
                 * @description The action to take for hasNativeCode issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              binScriptConfusion?: {
                /**
                 * @description The action to take for binScriptConfusion issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              shellScriptOverride?: {
                /**
                 * @description The action to take for shellScriptOverride issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              didYouMean?: {
                /**
                 * @description The action to take for didYouMean issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              gptDidYouMean?: {
                /**
                 * @description The action to take for gptDidYouMean issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              bidi?: {
                /**
                 * @description The action to take for bidi issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              zeroWidth?: {
                /**
                 * @description The action to take for zeroWidth issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              badEncoding?: {
                /**
                 * @description The action to take for badEncoding issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              homoglyphs?: {
                /**
                 * @description The action to take for homoglyphs issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              invisibleChars?: {
                /**
                 * @description The action to take for invisibleChars issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              suspiciousString?: {
                /**
                 * @description The action to take for suspiciousString issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              potentialVulnerability?: {
                /**
                 * @description The action to take for potentialVulnerability issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
            };
            /**
             * @description The default security policy for the organization
             * @default default
             * @enum {string}
             */
            securityPolicyDefault?: "default" | "low" | "medium" | "high";
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Update Security Policy
   * @description Update the security policy of an organization.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - security-policy:update
   */
  updateOrgSecurityPolicy: {
    parameters: {
      query?: {
        /** @description Return only customized security policy rules in the response. */
        custom_rules_only?: boolean;
      };
      path: {
        /** @description The slug of the organization */
        org_slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The default security policy for the organization
           * @enum {string}
           */
          policyDefault?: "default" | "low" | "medium" | "high";
          policyRules?: {
            gptSecurity?: {
              /**
               * @description The action to take for gptSecurity issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            gptAnomaly?: {
              /**
               * @description The action to take for gptAnomaly issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            gptMalware?: {
              /**
               * @description The action to take for gptMalware issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            filesystemAccess?: {
              /**
               * @description The action to take for filesystemAccess issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            networkAccess?: {
              /**
               * @description The action to take for networkAccess issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            shellAccess?: {
              /**
               * @description The action to take for shellAccess issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            debugAccess?: {
              /**
               * @description The action to take for debugAccess issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            criticalCVE?: {
              /**
               * @description The action to take for criticalCVE issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            cve?: {
              /**
               * @description The action to take for cve issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            mediumCVE?: {
              /**
               * @description The action to take for mediumCVE issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            mildCVE?: {
              /**
               * @description The action to take for mildCVE issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            emptyPackage?: {
              /**
               * @description The action to take for emptyPackage issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            trivialPackage?: {
              /**
               * @description The action to take for trivialPackage issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            noREADME?: {
              /**
               * @description The action to take for noREADME issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            shrinkwrap?: {
              /**
               * @description The action to take for shrinkwrap issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            licenseSpdxDisj?: {
              /**
               * @description The action to take for licenseSpdxDisj issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            unsafeCopyright?: {
              /**
               * @description The action to take for unsafeCopyright issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            licenseChange?: {
              /**
               * @description The action to take for licenseChange issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            nonOSILicense?: {
              /**
               * @description The action to take for nonOSILicense issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            deprecatedLicense?: {
              /**
               * @description The action to take for deprecatedLicense issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            missingLicense?: {
              /**
               * @description The action to take for missingLicense issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            nonSPDXLicense?: {
              /**
               * @description The action to take for nonSPDXLicense issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            unclearLicense?: {
              /**
               * @description The action to take for unclearLicense issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            mixedLicense?: {
              /**
               * @description The action to take for mixedLicense issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            notice?: {
              /**
               * @description The action to take for notice issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            modifiedLicense?: {
              /**
               * @description The action to take for modifiedLicense issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            modifiedException?: {
              /**
               * @description The action to take for modifiedException issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            licenseException?: {
              /**
               * @description The action to take for licenseException issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            deprecatedException?: {
              /**
               * @description The action to take for deprecatedException issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            miscLicenseIssues?: {
              /**
               * @description The action to take for miscLicenseIssues issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            unidentifiedLicense?: {
              /**
               * @description The action to take for unidentifiedLicense issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            noLicenseFound?: {
              /**
               * @description The action to take for noLicenseFound issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            explicitlyUnlicensedItem?: {
              /**
               * @description The action to take for explicitlyUnlicensedItem issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            copyleftLicense?: {
              /**
               * @description The action to take for copyleftLicense issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            nonpermissiveLicense?: {
              /**
               * @description The action to take for nonpermissiveLicense issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            ambiguousClassifier?: {
              /**
               * @description The action to take for ambiguousClassifier issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            invalidPackageJSON?: {
              /**
               * @description The action to take for invalidPackageJSON issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            httpDependency?: {
              /**
               * @description The action to take for httpDependency issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            gitDependency?: {
              /**
               * @description The action to take for gitDependency issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            gitHubDependency?: {
              /**
               * @description The action to take for gitHubDependency issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            fileDependency?: {
              /**
               * @description The action to take for fileDependency issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            noTests?: {
              /**
               * @description The action to take for noTests issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            noRepository?: {
              /**
               * @description The action to take for noRepository issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            badSemver?: {
              /**
               * @description The action to take for badSemver issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            badSemverDependency?: {
              /**
               * @description The action to take for badSemverDependency issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            noV1?: {
              /**
               * @description The action to take for noV1 issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            noWebsite?: {
              /**
               * @description The action to take for noWebsite issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            noBugTracker?: {
              /**
               * @description The action to take for noBugTracker issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            noAuthorData?: {
              /**
               * @description The action to take for noAuthorData issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            typeModuleCompatibility?: {
              /**
               * @description The action to take for typeModuleCompatibility issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            floatingDependency?: {
              /**
               * @description The action to take for floatingDependency issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            manifestConfusion?: {
              /**
               * @description The action to take for manifestConfusion issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            malware?: {
              /**
               * @description The action to take for malware issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            telemetry?: {
              /**
               * @description The action to take for telemetry issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            troll?: {
              /**
               * @description The action to take for troll issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            deprecated?: {
              /**
               * @description The action to take for deprecated issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            chronoAnomaly?: {
              /**
               * @description The action to take for chronoAnomaly issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            compromisedSSHKey?: {
              /**
               * @description The action to take for compromisedSSHKey issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            semverAnomaly?: {
              /**
               * @description The action to take for semverAnomaly issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            newAuthor?: {
              /**
               * @description The action to take for newAuthor issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            unstableOwnership?: {
              /**
               * @description The action to take for unstableOwnership issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            missingAuthor?: {
              /**
               * @description The action to take for missingAuthor issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            unmaintained?: {
              /**
               * @description The action to take for unmaintained issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            unpublished?: {
              /**
               * @description The action to take for unpublished issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            majorRefactor?: {
              /**
               * @description The action to take for majorRefactor issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            missingTarball?: {
              /**
               * @description The action to take for missingTarball issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            suspiciousStarActivity?: {
              /**
               * @description The action to take for suspiciousStarActivity issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            unpopularPackage?: {
              /**
               * @description The action to take for unpopularPackage issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            socketUpgradeAvailable?: {
              /**
               * @description The action to take for socketUpgradeAvailable issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            longStrings?: {
              /**
               * @description The action to take for longStrings issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            highEntropyStrings?: {
              /**
               * @description The action to take for highEntropyStrings issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            urlStrings?: {
              /**
               * @description The action to take for urlStrings issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            usesEval?: {
              /**
               * @description The action to take for usesEval issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            dynamicRequire?: {
              /**
               * @description The action to take for dynamicRequire issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            envVars?: {
              /**
               * @description The action to take for envVars issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            missingDependency?: {
              /**
               * @description The action to take for missingDependency issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            unusedDependency?: {
              /**
               * @description The action to take for unusedDependency issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            peerDependency?: {
              /**
               * @description The action to take for peerDependency issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            uncaughtOptionalDependency?: {
              /**
               * @description The action to take for uncaughtOptionalDependency issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            unresolvedRequire?: {
              /**
               * @description The action to take for unresolvedRequire issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            extraneousDependency?: {
              /**
               * @description The action to take for extraneousDependency issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            obfuscatedRequire?: {
              /**
               * @description The action to take for obfuscatedRequire issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            obfuscatedFile?: {
              /**
               * @description The action to take for obfuscatedFile issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            minifiedFile?: {
              /**
               * @description The action to take for minifiedFile issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            installScripts?: {
              /**
               * @description The action to take for installScripts issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            hasNativeCode?: {
              /**
               * @description The action to take for hasNativeCode issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            binScriptConfusion?: {
              /**
               * @description The action to take for binScriptConfusion issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            shellScriptOverride?: {
              /**
               * @description The action to take for shellScriptOverride issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            didYouMean?: {
              /**
               * @description The action to take for didYouMean issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            gptDidYouMean?: {
              /**
               * @description The action to take for gptDidYouMean issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            bidi?: {
              /**
               * @description The action to take for bidi issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            zeroWidth?: {
              /**
               * @description The action to take for zeroWidth issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            badEncoding?: {
              /**
               * @description The action to take for badEncoding issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            homoglyphs?: {
              /**
               * @description The action to take for homoglyphs issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            invisibleChars?: {
              /**
               * @description The action to take for invisibleChars issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            suspiciousString?: {
              /**
               * @description The action to take for suspiciousString issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
            potentialVulnerability?: {
              /**
               * @description The action to take for potentialVulnerability issues.
               * @enum {string}
               */
              action: "defer" | "error" | "warn" | "monitor" | "ignore";
            };
          };
          /**
           * @description Reset the policy rules to the default. When set to true, do not include any policyRules updates.
           * @default false
           */
          resetPolicyRules?: boolean;
        };
      };
    };
    responses: {
      /** @description Updated repository details */
      200: {
        content: {
          "application/json": {
            securityPolicyRules?: {
              gptSecurity?: {
                /**
                 * @description The action to take for gptSecurity issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              gptAnomaly?: {
                /**
                 * @description The action to take for gptAnomaly issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              gptMalware?: {
                /**
                 * @description The action to take for gptMalware issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              filesystemAccess?: {
                /**
                 * @description The action to take for filesystemAccess issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              networkAccess?: {
                /**
                 * @description The action to take for networkAccess issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              shellAccess?: {
                /**
                 * @description The action to take for shellAccess issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              debugAccess?: {
                /**
                 * @description The action to take for debugAccess issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              criticalCVE?: {
                /**
                 * @description The action to take for criticalCVE issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              cve?: {
                /**
                 * @description The action to take for cve issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              mediumCVE?: {
                /**
                 * @description The action to take for mediumCVE issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              mildCVE?: {
                /**
                 * @description The action to take for mildCVE issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              emptyPackage?: {
                /**
                 * @description The action to take for emptyPackage issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              trivialPackage?: {
                /**
                 * @description The action to take for trivialPackage issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              noREADME?: {
                /**
                 * @description The action to take for noREADME issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              shrinkwrap?: {
                /**
                 * @description The action to take for shrinkwrap issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              licenseSpdxDisj?: {
                /**
                 * @description The action to take for licenseSpdxDisj issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              unsafeCopyright?: {
                /**
                 * @description The action to take for unsafeCopyright issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              licenseChange?: {
                /**
                 * @description The action to take for licenseChange issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              nonOSILicense?: {
                /**
                 * @description The action to take for nonOSILicense issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              deprecatedLicense?: {
                /**
                 * @description The action to take for deprecatedLicense issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              missingLicense?: {
                /**
                 * @description The action to take for missingLicense issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              nonSPDXLicense?: {
                /**
                 * @description The action to take for nonSPDXLicense issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              unclearLicense?: {
                /**
                 * @description The action to take for unclearLicense issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              mixedLicense?: {
                /**
                 * @description The action to take for mixedLicense issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              notice?: {
                /**
                 * @description The action to take for notice issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              modifiedLicense?: {
                /**
                 * @description The action to take for modifiedLicense issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              modifiedException?: {
                /**
                 * @description The action to take for modifiedException issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              licenseException?: {
                /**
                 * @description The action to take for licenseException issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              deprecatedException?: {
                /**
                 * @description The action to take for deprecatedException issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              miscLicenseIssues?: {
                /**
                 * @description The action to take for miscLicenseIssues issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              unidentifiedLicense?: {
                /**
                 * @description The action to take for unidentifiedLicense issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              noLicenseFound?: {
                /**
                 * @description The action to take for noLicenseFound issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              explicitlyUnlicensedItem?: {
                /**
                 * @description The action to take for explicitlyUnlicensedItem issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              copyleftLicense?: {
                /**
                 * @description The action to take for copyleftLicense issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              nonpermissiveLicense?: {
                /**
                 * @description The action to take for nonpermissiveLicense issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              ambiguousClassifier?: {
                /**
                 * @description The action to take for ambiguousClassifier issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              invalidPackageJSON?: {
                /**
                 * @description The action to take for invalidPackageJSON issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              httpDependency?: {
                /**
                 * @description The action to take for httpDependency issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              gitDependency?: {
                /**
                 * @description The action to take for gitDependency issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              gitHubDependency?: {
                /**
                 * @description The action to take for gitHubDependency issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              fileDependency?: {
                /**
                 * @description The action to take for fileDependency issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              noTests?: {
                /**
                 * @description The action to take for noTests issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              noRepository?: {
                /**
                 * @description The action to take for noRepository issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              badSemver?: {
                /**
                 * @description The action to take for badSemver issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              badSemverDependency?: {
                /**
                 * @description The action to take for badSemverDependency issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              noV1?: {
                /**
                 * @description The action to take for noV1 issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              noWebsite?: {
                /**
                 * @description The action to take for noWebsite issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              noBugTracker?: {
                /**
                 * @description The action to take for noBugTracker issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              noAuthorData?: {
                /**
                 * @description The action to take for noAuthorData issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              typeModuleCompatibility?: {
                /**
                 * @description The action to take for typeModuleCompatibility issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              floatingDependency?: {
                /**
                 * @description The action to take for floatingDependency issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              manifestConfusion?: {
                /**
                 * @description The action to take for manifestConfusion issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              malware?: {
                /**
                 * @description The action to take for malware issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              telemetry?: {
                /**
                 * @description The action to take for telemetry issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              troll?: {
                /**
                 * @description The action to take for troll issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              deprecated?: {
                /**
                 * @description The action to take for deprecated issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              chronoAnomaly?: {
                /**
                 * @description The action to take for chronoAnomaly issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              compromisedSSHKey?: {
                /**
                 * @description The action to take for compromisedSSHKey issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              semverAnomaly?: {
                /**
                 * @description The action to take for semverAnomaly issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              newAuthor?: {
                /**
                 * @description The action to take for newAuthor issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              unstableOwnership?: {
                /**
                 * @description The action to take for unstableOwnership issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              missingAuthor?: {
                /**
                 * @description The action to take for missingAuthor issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              unmaintained?: {
                /**
                 * @description The action to take for unmaintained issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              unpublished?: {
                /**
                 * @description The action to take for unpublished issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              majorRefactor?: {
                /**
                 * @description The action to take for majorRefactor issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              missingTarball?: {
                /**
                 * @description The action to take for missingTarball issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              suspiciousStarActivity?: {
                /**
                 * @description The action to take for suspiciousStarActivity issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              unpopularPackage?: {
                /**
                 * @description The action to take for unpopularPackage issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              socketUpgradeAvailable?: {
                /**
                 * @description The action to take for socketUpgradeAvailable issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              longStrings?: {
                /**
                 * @description The action to take for longStrings issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              highEntropyStrings?: {
                /**
                 * @description The action to take for highEntropyStrings issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              urlStrings?: {
                /**
                 * @description The action to take for urlStrings issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              usesEval?: {
                /**
                 * @description The action to take for usesEval issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              dynamicRequire?: {
                /**
                 * @description The action to take for dynamicRequire issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              envVars?: {
                /**
                 * @description The action to take for envVars issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              missingDependency?: {
                /**
                 * @description The action to take for missingDependency issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              unusedDependency?: {
                /**
                 * @description The action to take for unusedDependency issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              peerDependency?: {
                /**
                 * @description The action to take for peerDependency issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              uncaughtOptionalDependency?: {
                /**
                 * @description The action to take for uncaughtOptionalDependency issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              unresolvedRequire?: {
                /**
                 * @description The action to take for unresolvedRequire issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              extraneousDependency?: {
                /**
                 * @description The action to take for extraneousDependency issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              obfuscatedRequire?: {
                /**
                 * @description The action to take for obfuscatedRequire issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              obfuscatedFile?: {
                /**
                 * @description The action to take for obfuscatedFile issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              minifiedFile?: {
                /**
                 * @description The action to take for minifiedFile issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              installScripts?: {
                /**
                 * @description The action to take for installScripts issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              hasNativeCode?: {
                /**
                 * @description The action to take for hasNativeCode issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              binScriptConfusion?: {
                /**
                 * @description The action to take for binScriptConfusion issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              shellScriptOverride?: {
                /**
                 * @description The action to take for shellScriptOverride issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              didYouMean?: {
                /**
                 * @description The action to take for didYouMean issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              gptDidYouMean?: {
                /**
                 * @description The action to take for gptDidYouMean issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              bidi?: {
                /**
                 * @description The action to take for bidi issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              zeroWidth?: {
                /**
                 * @description The action to take for zeroWidth issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              badEncoding?: {
                /**
                 * @description The action to take for badEncoding issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              homoglyphs?: {
                /**
                 * @description The action to take for homoglyphs issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              invisibleChars?: {
                /**
                 * @description The action to take for invisibleChars issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              suspiciousString?: {
                /**
                 * @description The action to take for suspiciousString issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
              potentialVulnerability?: {
                /**
                 * @description The action to take for potentialVulnerability issues.
                 * @enum {string}
                 */
                action: "defer" | "error" | "warn" | "monitor" | "ignore";
              };
            };
            /**
             * @description The default security policy for the organization
             * @default default
             * @enum {string}
             */
            securityPolicyDefault?: "default" | "low" | "medium" | "high";
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Get Organization License Policy
   * @description Retrieve the license policy of an organization.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - license-policy:read
   */
  getOrgLicensePolicy: {
    parameters: {
      path: {
        /** @description The slug of the organization */
        org_slug: string;
      };
    };
    responses: {
      /** @description Retrieved license policy details */
      200: {
        content: {
          "application/json": {
            /** @default */
            license_policy_org_id?: string;
            license_policy?: {
              [key: string]: {
                /** @default false */
                allowed?: boolean;
                /** @default */
                licenseId?: string;
                /** @default */
                name?: string;
                /** @default false */
                deprecated?: boolean;
                /** @default false */
                fsfLibre?: boolean;
                /** @default false */
                osiApproved?: boolean;
                /** @default */
                crossRef?: string;
                /** @default */
                blueOakTier?: string;
                /** @default */
                blueOakFamily?: string;
                /** @default */
                licenseExceptionId?: string;
                /** @default false */
                isDeprecatedLicenseId?: boolean;
              };
            };
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Update License Policy
   * @description Update the license policy of an organization.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - license-policy:update
   */
  updateOrgLicensePolicy: {
    parameters: {
      query: {
        /** @description Merge the policy update with the existing policy. Default is true. If false, the existing policy will be replaced with the new policy. */
        merge_update: boolean;
      };
      path: {
        /** @description The slug of the organization */
        org_slug: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          quick_setup?: {
            /** @default false */
            permissive?: boolean;
            /** @default false */
            weak_copyleft?: boolean;
            /** @default false */
            strong_copyleft?: boolean;
            /** @default false */
            lead?: boolean;
          };
          license_policy?: {
            [key: string]: boolean;
          };
        };
      };
    };
    responses: {
      /** @description Updated repository details */
      200: {
        content: {
          "application/json": {
            /** @default */
            license_policy_org_id?: string;
            license_policy?: {
              [key: string]: {
                /** @default false */
                allowed?: boolean;
                /** @default */
                licenseId?: string;
                /** @default */
                name?: string;
                /** @default false */
                deprecated?: boolean;
                /** @default false */
                fsfLibre?: boolean;
                /** @default false */
                osiApproved?: boolean;
                /** @default */
                crossRef?: string;
                /** @default */
                blueOakTier?: string;
                /** @default */
                blueOakFamily?: string;
                /** @default */
                licenseExceptionId?: string;
                /** @default false */
                isDeprecatedLicenseId?: boolean;
              };
            };
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Get organization analytics (unstable)
   * @description Get analytics data regarding the number of alerts found across all active repositories.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - report:write
   */
  getOrgAnalytics: {
    parameters: {
      path: {
        filter: string;
      };
    };
    responses: {
      /** @description Socket analytics - organization-level data */
      200: {
        content: {
          "application/json": {
              /** @default 0 */
              id: number;
              /** @default */
              created_at: string;
              /** @default */
              repository_id: string;
              /** @default 0 */
              organization_id: number;
              /** @default */
              repository_name: string;
              /** @default 0 */
              total_critical_alerts: number;
              /** @default 0 */
              total_high_alerts: number;
              /** @default 0 */
              total_medium_alerts: number;
              /** @default 0 */
              total_low_alerts: number;
              /** @default 0 */
              total_critical_added: number;
              /** @default 0 */
              total_high_added: number;
              /** @default 0 */
              total_medium_added: number;
              /** @default 0 */
              total_low_added: number;
              /** @default 0 */
              total_critical_prevented: number;
              /** @default 0 */
              total_high_prevented: number;
              /** @default 0 */
              total_medium_prevented: number;
              /** @default 0 */
              total_low_prevented: number;
              /** @default {} */
              top_five_alert_types: Record<string, never>;
            }[];
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Get repository analytics
   * @description Get analytics data regarding the number of alerts found in a single repository.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - report:write
   */
  getRepoAnalytics: {
    parameters: {
      path: {
        name: string;
        filter: string;
      };
    };
    responses: {
      /** @description Socket analytics - repo-level data */
      200: {
        content: {
          "application/json": {
              /** @default 0 */
              id: number;
              /** @default */
              repository_id: string;
              /** @default */
              created_at: string;
              /** @default 0 */
              organization_id: number;
              /** @default */
              repository_name: string;
              /** @default 0 */
              total_critical_alerts: number;
              /** @default 0 */
              total_high_alerts: number;
              /** @default 0 */
              total_medium_alerts: number;
              /** @default 0 */
              total_low_alerts: number;
              /** @default 0 */
              total_critical_added: number;
              /** @default 0 */
              total_high_added: number;
              /** @default 0 */
              total_medium_added: number;
              /** @default 0 */
              total_low_added: number;
              /** @default 0 */
              total_critical_prevented: number;
              /** @default 0 */
              total_high_prevented: number;
              /** @default 0 */
              total_medium_prevented: number;
              /** @default 0 */
              total_low_prevented: number;
              /** @default {} */
              top_five_alert_types: Record<string, never>;
            }[];
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Search dependencies
   * @description Search for any dependency that is being used in your organization.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - Any
   */
  searchDependencies: {
    requestBody?: {
      content: {
        "application/json": {
          /** @default 50 */
          limit: number;
          /** @default 0 */
          offset: number;
        };
      };
    };
    responses: {
      /** @description Search dependencies response */
      200: {
        content: {
          "application/json": {
            /** @default false */
            end: boolean;
            /** @default 1000 */
            limit: number;
            /** @default 0 */
            offset: number;
            rows: {
                /** @default */
                branch: string;
                /** @default false */
                direct: boolean;
                /** @default */
                id: string;
                /** @default */
                name: string;
                /** @default */
                namespace: string;
                /** @default */
                repository: string;
                /** @default */
                type: string;
                /** @default */
                version: string;
              }[];
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Create a snapshot of all dependencies from manifest information
   * @deprecated
   * @description Upload a set of manifest or lockfiles to get your dependency tree analyzed by Socket.
   * You can upload multiple lockfiles in the same request, but each filename must be unique.
   *
   * The name of the file must be in the supported list.
   *
   * For example, these are valid filenames: "requirements.txt", "package.json", "folder/package.json", and "deep/nested/folder/package.json".
   *
   * This endpoint consumes 100 units of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - report:write
   */
  createDependenciesSnapshot: {
    parameters: {
      query?: {
        repository?: string;
        branch?: string;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** @default */
          repository?: string;
          /** @default */
          branch?: string;
          [key: string]: undefined;
        };
      };
    };
    responses: {
      /** @description ID of the dependencies snapshot */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
      500: components["responses"]["SocketInternalServerError"];
    };
  };
  /**
   * Get supported files for report
   * @description Get a list of supported files for project report generation.
   * Files are categorized first by environment (e.g. NPM or PyPI), then by name.
   *
   * Files whose names match the patterns returned by this endpoint can be uploaded for report generation.
   * Examples of supported filenames include `package.json`, `package-lock.json`, and `yarn.lock`.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   */
  getReportSupportedFiles: {
    responses: {
      /** @description Glob patterns used to match supported files */
      200: {
        content: {
          "application/json": {
            [key: string]: {
              [key: string]: {
                /** @default */
                pattern: string;
              };
            };
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Delete a report
   * @deprecated
   * @description Deprecated: Use `/orgs/{org_slug}/full-scans` instead. Delete a specific project report generated with the GitHub app.
   *
   * This endpoint consumes 10 units of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - report:write
   */
  deleteReport: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            /** @default ok */
            status: string;
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Get list of reports
   * @deprecated
   * @description Deprecated: Use `/orgs/{org_slug}/full-scans` instead. Get all your project reports generated with the GitHub app.
   *
   * This endpoint consumes 10 units of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - report:list
   */
  getReportList: {
    parameters: {
      query?: {
        /** @description A Unix timestamp in seconds to filter results prior to this date. */
        from?: string;
        /** @description When defined, returns only reports for the associated repository slug. */
        repo?: string;
      };
    };
    responses: {
      /** @description List of project reports */
      200: {
        content: {
          "application/json": {
              /** @default */
              id: string;
              /** @default */
              url: string;
              /** @default */
              repo: string;
              /** @default */
              branch: string;
              /** @default null */
              pull_requests: Record<string, never>;
              /** @default */
              commit: string;
              /** @default */
              owner: string;
              /** @default */
              created_at: string;
            }[];
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Create a report
   * @deprecated
   * @description Deprecated: Use `/orgs/{org_slug}/full-scans` instead.
   *
   * Upload a lockfile to get your project analyzed by Socket.
   * You can upload multiple lockfiles in the same request, but each filename must be unique.
   *
   * The name of the file must be in the supported list.
   *
   * For example, these are valid filenames: `package.json`, `folder/package.json` and `deep/nested/folder/package.json`.
   *
   * This endpoint consumes 100 units of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - report:write
   */
  createReport: {
    requestBody?: {
      content: {
        "multipart/form-data": {
          issueRules?: {
            [key: string]: boolean;
          };
          [key: string]: undefined;
        };
      };
    };
    responses: {
      /** @description ID and URL of the project report */
      200: {
        content: {
          "application/json": {
            /** @default */
            id: string;
            /** @default */
            url: string;
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * View a report
   * @deprecated
   * @description Deprecated: Use `/orgs/{org_slug}/full-scans` instead. Get all the issues, packages, and scores related to an specific project report.
   *
   * This endpoint consumes 10 units of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - report:read
   */
  getReport: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Socket report */
      200: {
        content: {
          "application/json": components["schemas"]["SocketReport"];
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      410: components["responses"]["SocketGone"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * List GitHub repositories
   * @deprecated
   * @description Deprecated: Use `/orgs/{org_slug}/repos` instead. Get all GitHub repositories associated with a Socket org.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - repo:list
   */
  getRepoList: {
    parameters: {
      query?: {
        pageToken?: string;
      };
    };
    responses: {
      /** @description List of GitHub repositories associated with the organization. */
      200: {
        content: {
          "application/json": {
            results: {
                /** @default */
                id?: string;
                /** @default */
                created_at?: string;
                /** @default */
                updated_at?: string;
                /** @default */
                github_install_id?: string;
                /** @default */
                github_repo_id?: string;
                /** @default */
                name?: string;
                /** @default */
                github_full_name?: string;
                /** @default */
                organization_id?: string;
                latest_project_report?: {
                  /** @default */
                  id: string;
                  /** @default */
                  created_at: string;
                };
              }[];
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Get Threat Feed Items (Beta)
   * @description Paginated list of threat feed items.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - threat-feed:list
   */
  getThreatFeedItems: {
    parameters: {
      query?: {
        /** @description Number of items per page */
        per_page?: number;
        /** @description Page token */
        page?: string;
        /** @description Order asc or desc by the createdAt attribute. */
        direction?: "desc" | "asc";
        /** @description Filter what type of threats to return */
        filter?: "u" | "c" | "fp" | "tp" | "mal" | "vuln" | "anom" | "joke" | "spy" | "typo" | "secret";
        /** @description Filter threats by package name */
        name?: string;
        /** @description Filter threats by package version */
        version?: string;
        /** @description Filter threats by package ecosystem type */
        ecosystem?: "gem" | "golang" | "maven" | "npm" | "pypi";
      };
    };
    responses: {
      /** @description The paginated list of items in the threat feed and the next page querystring token. */
      200: {
        content: {
          "application/json": {
            results: {
                /** @default */
                createdAt?: string;
                /** @default */
                description?: string;
                /** @default 0 */
                id?: number;
                /** @default */
                locationHtmlUrl?: string;
                /** @default */
                packageHtmlUrl?: string;
                /** @default */
                purl?: string;
                /** @default */
                removedAt?: string;
                /** @default */
                threatType?: string;
              }[];
            /** @default */
            nextPage: string;
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Returns the OpenAPI definition
   * @description Retrieve the API specification in an Openapi JSON format.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   */
  getOpenAPI: {
    responses: {
      /** @description OpenAPI specification */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Get quota
   * @description Get your current API quota. You can use this endpoint to prevent doing requests that might spend all your quota.
   *
   * This endpoint consumes 0 units of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - Any
   */
  getQuota: {
    responses: {
      /** @description Quota amount */
      200: {
        content: {
          "application/json": {
            /** @default 0 */
            quota: number;
          };
        };
      };
      401: components["responses"]["SocketUnauthorized"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * List organizations
   * @description Get information on the current organizations associated with the API key.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - Any
   */
  getOrganizations: {
    responses: {
      /** @description Organizations information */
      200: {
        content: {
          "application/json": {
            organizations: {
              [key: string]: {
                /** @default */
                id: string;
                /** @default */
                name: string;
                /** @default */
                image: string;
                /** @default */
                plan: string;
                /** @default */
                slug: string;
              };
            };
          };
        };
      };
      401: components["responses"]["SocketUnauthorized"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Calculate settings
   * @description Get current settings for the requested organizations and default settings to allow deferrals.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - Any
   */
  postSettings: {
    /** @description Array of organization selector objects (with `organization` field holding the organization ID) to get settings for */
    requestBody?: {
      content: {
        "application/json": {
            /** @default */
            organization?: string;
          }[];
      };
    };
    responses: {
      /** @description Organization settings. Returned object contains default issue rules and an array of entries, with each entry representing an organization's settings. */
      200: {
        content: {
          "application/json": {
            defaults: {
              issueRules: {
                [key: string]: {
                  /** @enum {string} */
                  action?: "error" | "ignore" | "warn";
                };
              };
            };
            entries: ({
                /** @default */
                start: string | null;
                settings: {
                  [key: string]: {
                    deferTo: string | null;
                    issueRules: {
                      [key: string]: {
                        /** @enum {string} */
                        action: "defer" | "error" | "ignore" | "warn" | "monitor";
                      };
                    };
                  };
                };
              })[];
          };
        };
      };
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Get issues by package
   * @deprecated
   * @description Get all the issues related with a particular npm package version.
   * This endpoint returns the issue type, location, and additional details related to each issue in the `props` attribute.
   *
   * You can [see here](https://socket.dev/npm/issue) the full list of issues.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - Any
   */
  getIssuesByNPMPackage: {
    parameters: {
      path: {
        package: string;
        version: string;
      };
    };
    responses: {
      /** @description Socket issue lists */
      200: {
        content: {
          "application/json": components["schemas"]["SocketIssueList"];
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Get score by package
   * @deprecated
   * @description Get all the scores and metrics by category that are used to evaluate the package version.
   *
   * This endpoint is deprecated. Use the batched "Get Packages" endpoint instead.
   *
   * - depscore: The average of all score factors. (0-1)
   * - supplyChainRisk: Score factors relating to supply chain security (0-1)
   * - downloadCount: The number of downloads for the package. Higher downloads contribute to a higher score.
   * - supplyChainRiskIssueLow/Mid/High/Critical: The number of supply chain risk issues of varying severity. Lower numbers contribute to a higher score.
   * - dependencyCount: The number of production dependencies. Lower count contributes to a higher score.
   * - devDependencyCount: The number of development dependencies. Lower count contributes to a higher score.
   * - transitiveDependencyCount: The number of transitive dependencies. Lower count contributes to a higher score.
   * - totalDependencyCount: The total number of dependencies (production + development + transitive). Lower count contributes to a higher score.
   * - quality: Score factors relating to code quality (0-1)
   * - qualityIssueLow/Mid/High/Critical: The number of code quality issues of varying severity. Lower numbers contribute to a higher score.
   * - linesOfCode: The number of lines of code in the package. Lower count contributes to a higher score.
   * - readmeLength: The length of the package's README file. Longer READMEs contribute to a higher score.
   * - maintenance: Score factors relating to package maintenance (0-1)
   * - maintainerCount: The number of maintainers for the package. More maintainers contribute to a higher score.
   * - versionsLastWeek/Month/TwoMonths/Year: The number of versions released in different time periods. More recent releases contribute to a higher score.
   * - versionCount: The total number of versions released. Higher count contributes to a higher score.
   * - maintenanceIssueLow/Mid/High/Critical: The number of maintenance issues of varying severity. Lower numbers contribute to a higher score.
   * - vulnerability: Score factors relating to package vulnerabilities (0-1)
   * - vulnerabilityIssueLow/Mid/High/Critical: The number of vulnerability issues of varying severity. Lower numbers contribute to a higher score.
   * - dependencyVulnerabilityCount: The number of vulnerabilities in the package's dependencies. Lower count contributes to a higher score.
   * - vulnerabilityCount: The number of vulnerabilities in the package itself. Lower count contributes to a higher score.
   * - license: Score factors relating to package licensing (0-1)
   * - licenseIssueLow/Mid/High/Critical: The number of license issues of varying severity. Lower numbers contribute to a higher score.
   * - licenseQuality: A score indicating the quality/permissiveness of the package's license. Higher quality contributes to a higher score.
   * - miscellaneous: Miscellaneous metadata about the package version.
   * - versionAuthorName/Email: The name and email of the version author.
   * - fileCount: The number of files in the package.
   * - byteCount: The total size in bytes of the package.
   * - typeModule: Whether the package declares a "type": "module" field.
   *
   * This endpoint consumes 1 unit of your quota.
   *
   * This endpoint requires the following org token scopes:
   * - Any
   */
  getScoreByNPMPackage: {
    parameters: {
      path: {
        package: string;
        version: string;
      };
    };
    responses: {
      /** @description Socket package scores */
      200: {
        content: {
          "application/json": components["schemas"]["SocketPackageScore"];
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
}

