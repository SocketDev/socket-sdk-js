/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/npm/{package}/{version}/issues": {
    /**
     * Get issues by package 
     * @description Get all the issues related with a particular npm package version.
     * This endpoint returns the issue type, location, and additional details related to each issue in the `props` attribute.
     * 
     * You can [see here](https://socket.dev/npm/issue) the full list of issues.
     * 
     * This endpoint consumes 1 unit of your quota.
     */
    get: operations["getIssuesByNPMPackage"];
  };
  "/npm/{package}/{version}/score": {
    /**
     * Get score by package 
     * @description Get all the scores and metrics by category that are used to evaluate the package version.
     * 
     * This endpoint consumes 1 unit of your quota.
     */
    get: operations["getScoreByNPMPackage"];
  };
  "/report/delete/{id}": {
    /**
     * Delete a report 
     * @description Delete a specific project report.
     * 
     * This endpoint consumes 10 units of your quota.
     */
    delete: operations["deleteReport"];
  };
  "/report/list": {
    /**
     * Get list of reports 
     * @description Get all your project reports.
     * 
     * This endpoint consumes 10 units of your quota.
     */
    get: operations["getReportList"];
  };
  "/report/upload": {
    /**
     * Create a report 
     * @description Upload a lockfile to get your project analyzed by Socket.
     * You can upload multiple lockfiles in the same request, but each filename must be unique.
     * 
     * The name of the file must be in the supported list.
     * 
     * For example, these are valid filenames: `package.json`, `folder/package.json` and `deep/nested/folder/package.json`.
     * 
     * This endpoint consumes 100 units of your quota.
     */
    put: operations["createReport"];
  };
  "/report/view/{id}": {
    /**
     * View a report 
     * @description Get all the issues, packages, and scores related to an specific project report.
     * 
     * This endpoint consumes 10 units of your quota.
     */
    get: operations["getReport"];
  };
  "/report/supported": {
    /**
     * Get supported files for report 
     * @description Get a list of supported files for project report generation.
     * Files are categorized first by environment (e.g. NPM or PyPI), then by name.
     * 
     * Files whose names match the patterns returned by this endpoint can be uploaded for report generation.
     * Examples of supported filenames include `package.json`, `package-lock.json`, and `yarn.lock`.
     * 
     * This endpoint consumes 0 units of your quota.
     */
    get: operations["getReportSupportedFiles"];
  };
  "/openapi": {
    /**
     * Returns the OpenAPI definition 
     * @description Retrieve the API specification in an Openapi JSON format.
     * 
     * This endpoint consumes 0 units of your quota.
     */
    get: operations["getOpenAPI"];
  };
  "/quota": {
    /**
     * Get quota 
     * @description Get your current API quota. You can use this endpoint to prevent doing requests that might spend all your quota.
     * 
     * This endpoint consumes 0 units of your quota.
     */
    get: operations["getQuota"];
  };
  "/organizations": {
    /**
     * List organizations 
     * @description Get information on the current organizations associated with the API key.
     * 
     * This endpoint consumes 0 units of your quota.
     */
    get: operations["getOrganizations"];
  };
  "/settings": {
    /**
     * Calculate settings 
     * @description Get your current settings the requested organizations and default settings to allow deferrals.
     * 
     * This endpoint consumes 0 units of your quota.
     */
    post: operations["postSettings"];
  };
  "/repo/list": {
    /**
     * Get list of repos and their latest project report 
     * @description Get all repositories in an org including their latest project report.
     * 
     * This endpoint consumes 0 units of your quota.
     */
    get: operations["getRepoList"];
  };
  "/dependencies/search": {
    /**
     * Search dependencies 
     * @description Search for any dependency that is being used in your organization.
     * 
     * This endpoint consumes 0 units of your quota.
     */
    post: operations["searchDependencies"];
  };
  "/dependencies/upload": {
    /**
     * Create a snapshot of all dependencies from manifest information 
     * @description Upload a set of manifest or lockfiles to get your dependency tree analyzed by Socket.
     * You can upload multiple lockfiles in the same request, but each filename must be unique.
     * 
     * The name of the file must be in the supported list.
     * 
     * For example, these are valid filenames: "requirements.txt", "package.json", "folder/package.json", and "deep/nested/folder/package.json".
     * 
     * This endpoint consumes 100 units of your quota.
     */
    post: operations["createDependenciesSnapshot"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    SocketIssueList: (components["schemas"]["SocketIssue"])[];
    SocketPackageScore: {
      supplyChainRisk: components["schemas"]["SocketMetricSchema"];
      quality: components["schemas"]["SocketMetricSchema"];
      maintenance: components["schemas"]["SocketMetricSchema"];
      vulnerability: components["schemas"]["SocketMetricSchema"];
      license: components["schemas"]["SocketMetricSchema"];
      miscellaneous: components["schemas"]["SocketMetricSchema"];
      /** @default 0 */
      depscore: number;
    };
    SocketReport: {
      /** @default */
      id: string;
      /** @default false */
      healthy: boolean;
      issues: components["schemas"]["SocketIssueList"];
      score: {
        /** @default 0 */
        avgSupplyChainRisk: number;
        /** @default 0 */
        avgQuality: number;
        /** @default 0 */
        avgMaintenance: number;
        /** @default 0 */
        avgVulnerability: number;
        /** @default 0 */
        avgLicense: number;
      };
      /** @default */
      url: string;
    };
    SocketIssue: ({
      /** @enum {string} */
      type?: "criticalCVE";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          cveId: string;
          cwes: ({
              /** @default */
              description: string;
              /** @default */
              id: string;
              /** @default */
              name: string;
            })[];
          /** @default */
          description: string;
          /** @default */
          firstPatchedVersionIdentifier: string;
          /** @default */
          ghsaId: string;
          /** @default critical */
          severity: string;
          /** @default */
          title: string;
          /** @default */
          url: string;
          /** @default */
          vulnerableVersionRange: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "cve";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          cveId: string;
          cwes: ({
              /** @default */
              description: string;
              /** @default */
              id: string;
              /** @default */
              name: string;
            })[];
          /** @default */
          description: string;
          /** @default */
          firstPatchedVersionIdentifier: string;
          /** @default */
          ghsaId: string;
          /** @default high */
          severity: string;
          /** @default */
          title: string;
          /** @default */
          url: string;
          /** @default */
          vulnerableVersionRange: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "mildCVE";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          cveId: string;
          cwes: ({
              /** @default */
              description: string;
              /** @default */
              id: string;
              /** @default */
              name: string;
            })[];
          /** @default */
          description: string;
          /** @default */
          firstPatchedVersionIdentifier: string;
          /** @default */
          ghsaId: string;
          /** @default low */
          severity: string;
          /** @default */
          title: string;
          /** @default */
          url: string;
          /** @default */
          vulnerableVersionRange: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "installScripts";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          script: string;
          /** @default */
          source: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "hasNativeCode";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "binScriptConfusion";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          binScript: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "shellScriptOverride";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          binScript: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "filesystemAccess";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default fs */
          module: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "networkAccess";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default net */
          module: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "shellAccess";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default child_process */
          module: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "debugAccess";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default vm */
          module: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "longStrings";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "highEntropyStrings";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "urlStrings";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          urlFragment: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "usesEval";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default eval */
          evalType: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "dynamicRequire";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "envVars";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          envVars: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "missingDependency";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          name: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "unusedDependency";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          name: string;
          /** @default */
          version: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "peerDependency";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          name: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "uncaughtOptionalDependency";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          name: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "unresolvedRequire";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "extraneousDependency";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "obfuscatedRequire";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "obfuscatedFile";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default 0 */
          confidence: number;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "minifiedFile";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default 0 */
          confidence: number;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "bidi";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "zeroWidth";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "badEncoding";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default utf8 */
          encoding: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "homoglyphs";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "invisibleChars";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "suspiciousString";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          pattern: string;
          /** @default */
          explanation: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "invalidPackageJSON";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "httpDependency";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          packageName: string;
          /** @default */
          url: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "gitDependency";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          packageName: string;
          /** @default */
          url: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "gitHubDependency";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          packageName: string;
          /** @default */
          githubUser: string;
          /** @default */
          githubRepo: string;
          /** @default */
          commitsh: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "fileDependency";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          packageName: string;
          /** @default */
          filePath: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "noTests";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "noRepository";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "badSemver";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "badSemverDependency";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          packageName: string;
          /** @default */
          packageVersion: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "noV1";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "noWebsite";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "noBugTracker";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "noAuthorData";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "typeModuleCompatibility";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "floatingDependency";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          dependency: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "manifestConfusion";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          key: string;
          /** @default */
          description: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "emptyPackage";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "trivialPackage";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default 0 */
          linesOfCode: number;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "noREADME";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "shrinkwrap";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "deprecated";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default This package is deprecated */
          reason: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "chronoAnomaly";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          prevChronoDate: string;
          /** @default */
          prevChronoVersion: string;
          /** @default */
          prevSemverDate: string;
          /** @default */
          prevSemverVersion: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "semverAnomaly";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          prevVersion: string;
          /** @default */
          newVersion: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "newAuthor";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          prevAuthor: string;
          /** @default */
          newAuthor: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "unstableOwnership";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          author: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "missingAuthor";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "unmaintained";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          lastPublish: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "unpublished";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          version: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "majorRefactor";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default 0 */
          linesChanged: number;
          /** @default 0 */
          prevSize: number;
          /** @default 0 */
          curSize: number;
          /** @default 0 */
          changedPercent: number;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "missingTarball";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "unpopularPackage";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "unsafeCopyright";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "licenseChange";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          prevLicenseId: string;
          /** @default */
          newLicenseId: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "nonOSILicense";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          licenseId: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "deprecatedLicense";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          licenseId: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "missingLicense";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "nonSPDXLicense";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "unclearLicense";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          possibleLicenseId: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "mixedLicense";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          licenseId: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "notice";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: Record<string, never>;
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "modifiedLicense";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          licenseId: string;
          /** @default 0 */
          similarity: number;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "modifiedException";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          exceptionId: string;
          /** @default 0 */
          similarity: number;
          /** @default */
          comments: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "licenseException";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          exceptionId: string;
          /** @default */
          comments: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "deprecatedException";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          exceptionId: string;
          /** @default */
          comments: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "didYouMean";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          alternatePackage: string;
          /** @default 0 */
          editDistance: number;
          /** @default 0 */
          downloads: number;
          /** @default 1 */
          downloadsRatio: number;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "malware";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default 0 */
          id: number;
          /** @default */
          note: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "telemetry";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default 0 */
          id: number;
          /** @default */
          note: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "troll";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default 0 */
          id: number;
          /** @default */
          note: string;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "gptSecurity";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          notes: string;
          /** @default 0 */
          confidence: number;
          /** @default 0 */
          severity: number;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    }) | ({
      /** @enum {string} */
      type?: "gptAnomaly";
      value?: components["schemas"]["SocketIssueBasics"] & {
        /** @default */
        description: string;
        props: {
          /** @default */
          notes: string;
          /** @default 0 */
          confidence: number;
          /** @default 0 */
          severity: number;
        };
        usage?: components["schemas"]["SocketUsageRef"];
      };
    });
    SocketMetricSchema: {
      /** @default 0 */
      score: number;
      components: {
        [key: string]: components["schemas"]["SocketMetricComponent"] | undefined;
      };
      /** @default 0 */
      limit?: number;
      /** @default */
      limitingMetric?: string;
    };
    SocketIssueBasics: {
      severity: components["schemas"]["SocketIssueSeverity"];
      category: components["schemas"]["SocketCategory"];
      locations: components["schemas"]["SocketRefList"];
      label: string;
    };
    SocketUsageRef: {
      file: components["schemas"]["SocketRefFile"];
      dependencies: components["schemas"]["SocketRefList"];
    };
    SocketMetricComponent: {
      /** @default 0 */
      score: number;
      /** @default 0 */
      maxScore: number;
      /** @default 0 */
      limit: number;
      /** @default null */
      value: Record<string, never>;
    };
    /**
     * @default low 
     * @enum {string}
     */
    SocketIssueSeverity: "low" | "middle" | "high" | "critical";
    /**
     * @default miscellaneous 
     * @enum {string}
     */
    SocketCategory: "supplyChainRisk" | "quality" | "maintenance" | "vulnerability" | "license" | "miscellaneous";
    SocketRefList: (components["schemas"]["SocketRef"])[];
    SocketRefFile: {
      /** @default */
      path: string;
      range?: components["schemas"]["SocketRefTextRange"];
      bytes?: components["schemas"]["SocketRefByteRange"];
    };
    SocketRef: {
      /** @enum {string} */
      type?: "unknown";
      value?: Record<string, never>;
    } | {
      /** @enum {string} */
      type?: "npm";
      value?: components["schemas"]["SocketRefNPM"];
    } | {
      /** @enum {string} */
      type?: "git";
      value?: components["schemas"]["SocketRefGit"];
    } | {
      /** @enum {string} */
      type?: "web";
      value?: components["schemas"]["SocketRefWeb"];
    } | {
      /** @enum {string} */
      type?: "pypi";
      value?: components["schemas"]["SocketRefPyPI"];
    } | {
      /** @enum {string} */
      type?: "go";
      value?: components["schemas"]["SocketRefGo"];
    };
    SocketRefTextRange: {
      /** @default 0 */
      startLine: number;
      /** @default 0 */
      startColumn: number;
      /** @default 0 */
      endLine: number;
      /** @default 0 */
      endColumn: number;
    };
    SocketRefByteRange: {
      /** @default 0 */
      start: number;
      /** @default 0 */
      end: number;
    };
    SocketRefNPM: {
      /** @default */
      package: string;
      /** @default */
      version?: string;
      file?: components["schemas"]["SocketRefFile"];
    };
    SocketRefGit: {
      /** @default */
      url: string;
      /** @default */
      commit?: string;
      /** @default */
      tag?: string;
      file?: components["schemas"]["SocketRefFile"];
    };
    SocketRefWeb: {
      /** @default */
      url: string;
      file?: components["schemas"]["SocketRefFile"];
    };
    SocketRefPyPI: {
      /** @default */
      package: string;
      /** @default */
      version?: string;
      /** @default */
      artifact?: string;
      file?: components["schemas"]["SocketRefFile"];
    };
    SocketRefGo: {
      /** @default */
      package: string;
      /** @default */
      version?: string;
      file?: components["schemas"]["SocketRefFile"];
    };
  };
  responses: {
    /** @description Bad request */
    SocketBadRequest: {
      content: {
        "application/json": {
          error: {
            /** @default */
            message: string;
          };
        };
      };
    };
    /** @description Unauthorized */
    SocketUnauthorized: {
      content: {
        "application/json": {
          error: {
            /** @default */
            message: string;
          };
        };
      };
    };
    /** @description Insufficient max_quota for API method */
    SocketForbidden: {
      content: {
        "application/json": {
          error: {
            /** @default */
            message: string;
          };
        };
      };
    };
    /** @description Resource not found */
    SocketNotFoundResponse: {
      content: {
        "application/json": {
          error: {
            /** @default */
            message: string;
          };
        };
      };
    };
    /** @description Insufficient quota for API route */
    SocketTooManyRequestsResponse: {
      headers: {
        /**
         * @description Retry contacting the endpoint *at least* after seconds.
         * See https://tools.ietf.org/html/rfc7231#section-7.1.3
         */
        "Retry-After"?: number;
      };
      content: {
        "application/json": {
          error: {
            /** @default */
            message: string;
          };
        };
      };
    };
    /** @description Internal server error */
    SocketInternalServerError: {
      content: {
        "application/json": {
          error: {
            /** @default */
            message: string;
          };
        };
      };
    };
  };
  parameters: never;
  requestBodies: {
  };
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * Get issues by package 
   * @description Get all the issues related with a particular npm package version.
   * This endpoint returns the issue type, location, and additional details related to each issue in the `props` attribute.
   * 
   * You can [see here](https://socket.dev/npm/issue) the full list of issues.
   * 
   * This endpoint consumes 1 unit of your quota.
   */
  getIssuesByNPMPackage: {
    parameters: {
      path: {
        package: string;
        version: string;
      };
    };
    responses: {
      /** @description Socket issue lists */
      200: {
        content: {
          "application/json": components["schemas"]["SocketIssueList"];
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Get score by package 
   * @description Get all the scores and metrics by category that are used to evaluate the package version.
   * 
   * This endpoint consumes 1 unit of your quota.
   */
  getScoreByNPMPackage: {
    parameters: {
      path: {
        package: string;
        version: string;
      };
    };
    responses: {
      /** @description Socket package scores */
      200: {
        content: {
          "application/json": components["schemas"]["SocketPackageScore"];
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Delete a report 
   * @description Delete a specific project report.
   * 
   * This endpoint consumes 10 units of your quota.
   */
  deleteReport: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          "application/json": {
            /** @default ok */
            status: string;
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Get list of reports 
   * @description Get all your project reports.
   * 
   * This endpoint consumes 10 units of your quota.
   */
  getReportList: {
    responses: {
      /** @description List of project reports */
      200: {
        content: {
          "application/json": ({
              /** @default */
              id: string;
              /** @default */
              url: string;
            })[];
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Create a report 
   * @description Upload a lockfile to get your project analyzed by Socket.
   * You can upload multiple lockfiles in the same request, but each filename must be unique.
   * 
   * The name of the file must be in the supported list.
   * 
   * For example, these are valid filenames: `package.json`, `folder/package.json` and `deep/nested/folder/package.json`.
   * 
   * This endpoint consumes 100 units of your quota.
   */
  createReport: {
    requestBody?: {
      content: {
        "multipart/form-data": {
          issueRules?: {
            [key: string]: boolean | undefined;
          };
          [key: string]: undefined;
        };
      };
    };
    responses: {
      /** @description ID and URL of the project report */
      200: {
        content: {
          "application/json": {
            /** @default */
            id: string;
            /** @default */
            url: string;
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * View a report 
   * @description Get all the issues, packages, and scores related to an specific project report.
   * 
   * This endpoint consumes 10 units of your quota.
   */
  getReport: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Socket report */
      200: {
        content: {
          "application/json": components["schemas"]["SocketReport"];
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Get supported files for report 
   * @description Get a list of supported files for project report generation.
   * Files are categorized first by environment (e.g. NPM or PyPI), then by name.
   * 
   * Files whose names match the patterns returned by this endpoint can be uploaded for report generation.
   * Examples of supported filenames include `package.json`, `package-lock.json`, and `yarn.lock`.
   * 
   * This endpoint consumes 0 units of your quota.
   */
  getReportSupportedFiles: {
    responses: {
      /** @description Glob patterns used to match supported files */
      200: {
        content: {
          "application/json": {
            [key: string]: ({
              [key: string]: {
                /** @default */
                pattern: string;
              } | undefined;
            }) | undefined;
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Returns the OpenAPI definition 
   * @description Retrieve the API specification in an Openapi JSON format.
   * 
   * This endpoint consumes 0 units of your quota.
   */
  getOpenAPI: {
    responses: {
      /** @description OpenAPI specification */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Get quota 
   * @description Get your current API quota. You can use this endpoint to prevent doing requests that might spend all your quota.
   * 
   * This endpoint consumes 0 units of your quota.
   */
  getQuota: {
    responses: {
      /** @description Quota amount */
      200: {
        content: {
          "application/json": {
            /** @default 0 */
            quota: number;
          };
        };
      };
      401: components["responses"]["SocketUnauthorized"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * List organizations 
   * @description Get information on the current organizations associated with the API key.
   * 
   * This endpoint consumes 0 units of your quota.
   */
  getOrganizations: {
    responses: {
      /** @description Organizations information */
      200: {
        content: {
          "application/json": {
            organizations: {
              [key: string]: {
                /** @default */
                id: string;
                /** @default */
                name: string;
                /** @default */
                image: string;
                /** @default */
                plan: string;
              } | undefined;
            };
          };
        };
      };
      401: components["responses"]["SocketUnauthorized"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Calculate settings 
   * @description Get your current settings the requested organizations and default settings to allow deferrals.
   * 
   * This endpoint consumes 0 units of your quota.
   */
  postSettings: {
    requestBody?: {
      content: {
        "application/json": ({
            /** @default */
            organization?: string;
          })[];
      };
    };
    responses: {
      /** @description Organization settings */
      200: {
        content: {
          "application/json": {
            defaults: {
              issueRules: {
                [key: string]: ({
                  /** @enum {string} */
                  action?: "error" | "ignore" | "warn";
                }) | undefined;
              };
            };
            entries: ({
                /** @default */
                start: string | null;
                settings: {
                  [key: string]: ({
                    deferTo: string | null;
                    issueRules: {
                      [key: string]: ({
                        /** @enum {string} */
                        action: "defer" | "error" | "ignore" | "warn";
                      }) | undefined;
                    };
                  }) | undefined;
                };
              })[];
          };
        };
      };
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Get list of repos and their latest project report 
   * @description Get all repositories in an org including their latest project report.
   * 
   * This endpoint consumes 0 units of your quota.
   */
  getRepoList: {
    responses: {
      /** @description List of repos and their latest project report for the organization associated with the token used */
      200: {
        content: {
          "application/json": {
            results: ({
                /** @default */
                id?: string;
                /** @default */
                created_at?: string;
                /** @default */
                updated_at?: string;
                /** @default */
                github_install_id?: string;
                /** @default */
                github_repo_id?: string;
                /** @default */
                name?: string;
                /** @default */
                github_full_name?: string;
                /** @default */
                organization_id?: string;
                latest_project_report?: {
                  /** @default */
                  id: string;
                  /** @default */
                  created_at: string;
                };
              })[];
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Search dependencies 
   * @description Search for any dependency that is being used in your organization.
   * 
   * This endpoint consumes 0 units of your quota.
   */
  searchDependencies: {
    requestBody?: {
      content: {
        "application/json": {
          /** @default 50 */
          limit: number;
          /** @default 0 */
          offset: number;
        };
      };
    };
    responses: {
      /** @description List of repos and their latest project report for the organization associated with the token used */
      200: {
        content: {
          "application/json": {
            /** @default false */
            end: boolean;
            /** @default 1000 */
            limit: number;
            /** @default 0 */
            offset: number;
            rows: ({
                /** @default */
                branch: string;
                /** @default */
                id: string;
                /** @default */
                name: string;
                /** @default */
                namespace: string;
                /** @default */
                repository: string;
                /** @default */
                type: string;
                /** @default */
                version: string;
              })[];
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      404: components["responses"]["SocketNotFoundResponse"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
    };
  };
  /**
   * Create a snapshot of all dependencies from manifest information 
   * @description Upload a set of manifest or lockfiles to get your dependency tree analyzed by Socket.
   * You can upload multiple lockfiles in the same request, but each filename must be unique.
   * 
   * The name of the file must be in the supported list.
   * 
   * For example, these are valid filenames: "requirements.txt", "package.json", "folder/package.json", and "deep/nested/folder/package.json".
   * 
   * This endpoint consumes 100 units of your quota.
   */
  createDependenciesSnapshot: {
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** @default */
          repository?: string;
          /** @default */
          branch?: string;
          [key: string]: undefined;
        };
      };
    };
    responses: {
      /** @description ID of the dependencies snapshot */
      200: {
        content: {
          "application/json": {
            /** @default */
            id: string;
          };
        };
      };
      400: components["responses"]["SocketBadRequest"];
      401: components["responses"]["SocketUnauthorized"];
      403: components["responses"]["SocketForbidden"];
      429: components["responses"]["SocketTooManyRequestsResponse"];
      500: components["responses"]["SocketInternalServerError"];
    };
  };
}

